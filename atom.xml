<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Busy-Bob.github.io</id>
    <title>勺海的博客</title>
    <updated>2021-01-18T13:53:08.657Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Busy-Bob.github.io"/>
    <link rel="self" href="https://Busy-Bob.github.io/atom.xml"/>
    <subtitle>尽应尽之事，做让自己开心的事。</subtitle>
    <logo>https://Busy-Bob.github.io/images/avatar.png</logo>
    <icon>https://Busy-Bob.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 勺海的博客</rights>
    <entry>
        <title type="html"><![CDATA[《FPGA并行编程-- 以HLS实现信号处理为例》学习(一)]]></title>
        <id>https://Busy-Bob.github.io/post/lesslessfpga-bing-xing-bian-cheng-yi-hls-shi-xian-xin-hao-chu-li-wei-li-greatergreater-xue-xi/</id>
        <link href="https://Busy-Bob.github.io/post/lesslessfpga-bing-xing-bian-cheng-yi-hls-shi-xian-xin-hao-chu-li-wei-li-greatergreater-xue-xi/">
        </link>
        <updated>2021-01-17T05:07:31.000Z</updated>
        <summary type="html"><![CDATA[<p>该书的中文翻译版本见<a href="https://xupsh.github.io/pp4fpgas-cn/">FPGA并行编程</a></p>
<p>LAB和代码见<a href="https://pp4fpgas.readthedocs.io/en/latest/index.html">Parallel Programming for FPGAs: Projects and Labs</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>该书的中文翻译版本见<a href="https://xupsh.github.io/pp4fpgas-cn/">FPGA并行编程</a></p>
<p>LAB和代码见<a href="https://pp4fpgas.readthedocs.io/en/latest/index.html">Parallel Programming for FPGAs: Projects and Labs</a></p>
<!-- more -->
<h1 id="前言">前言</h1>
<ul>
<li>设计者必须充分理解<strong>内存层级</strong>(应该是多级缓存)和<strong>带宽</strong>、<strong>空间局部性</strong>与<strong>时间局部性</strong>、<strong>并行结构</strong>和<strong>计算与存储</strong>之间的取舍与平衡。</li>
</ul>
<h1 id="第一章-简介">第一章 简介</h1>
<ul>
<li>FPGA由一个可编程<strong>逻辑模块</strong>的矩阵和与之相连的<strong>内存</strong>组成，通常这些模块是以**查找表（LUT）**的形式存在。(目前主流FPGA都采用了基于SRAM工艺的查找表结构【断电程序就没了】，也有一些军品和宇航级FPGA采用Flash或者熔丝与反熔丝工艺的查找表结构【断电后程序依然存在】)</li>
<li>目前，FPGA市场占有率最高的两大公司Xilinx和Altera生产的FPGA都是基于SRAM(latching circuitry (<strong>flip-flop</strong>) to store each bit)工艺的，需要在使用时外接一个<strong>片外存储器以保存程序</strong>。上电时，FPGA将外部存储器中的数据读入片内RAM，完成配置后，进入工作状态；掉电后FPGA恢复为白片，内部逻辑消失。</li>
<li><strong>查找表(Look-Up-Table, LUT)</strong>:
<ul>
<li>当用户通过原理图或HDL语言描述了一个逻辑电路以后，PLD/FPGA开发软件会自动计算逻辑电路的<strong>所有可能的结果，并把结果事先写入RAM</strong>,这样，每输入一个信号进行逻辑运算就等于输入一个地址进行查表，找出地址对应的内容，然后输出即可。<br>
<img src="https://Busy-Bob.github.io/post-images/1610113134354.jpg" alt="" loading="lazy"></li>
<li>实际中的FPGA大多使用<strong>4-6位输入</strong>的查找表作为运算基础， 大型FPGA内甚至有<strong>几百万</strong>个这一级别的查找表。</li>
</ul>
</li>
<li><strong>触发器(flip-flop, FF)</strong>:
<ul>
<li>最基本的内存单位, 貌似学过SR、D、T、JK触发器(锁存器)。
<ul>
<li><strong>SR触发器</strong>，<strong>两个与非门</strong>或者<strong>两个或非门</strong>都可以组成，只有这个没有CLK信号控制：<br>
<img src="https://Busy-Bob.github.io/post-images/1610113907359.gif" alt="" loading="lazy">
<ul>
<li>当R与S皆为低电位，Q与Q（Q的反相）保持于一个固定的状态。</li>
<li>当S（Set）为高电位，R（Reset）为低电位时，输出Q会被强制设置为高电位；</li>
<li>相反的，当S为低电位，R为高电位时，输出Q会被强制设置为低电位。</li>
<li>同时为高电位，是没有定义的行为。</li>
</ul>
</li>
<li><strong>D触发器</strong>：
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>=</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">Q_{next}=D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></li>
<li>当时脉由0转为1时，输出的值会和输入的值相等。此类触发器可用于防止因为噪声所带来的错误，以及通过管线增加处理资料的数量。</li>
</ul>
</li>
<li><strong>JK触发器</strong>：
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>=</mo><mover accent="true"><mi>K</mi><mo stretchy="true">‾</mo></mover><mi>Q</mi><mo>+</mo><mi>J</mi><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">Q_{next}=\overline{K} Q + J \overline{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></li>
<li>JK触发器是带了时钟的SR触发器，J＝Ｓ，Ｋ＝R，当然也多了一个同时为高电平的逻辑。</li>
</ul>
</li>
<li><strong>T 触发器</strong>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>=</mo><mover accent="true"><mi>T</mi><mo stretchy="true">‾</mo></mover><mi>Q</mi><mo>+</mo><mi>T</mi><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mi>Q</mi><mo>⊕</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">Q_{next}=\overline{T} Q + T \overline{Q} = Q \oplus T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></li>
<li>把JK触发器的J和K输入点连接在一起，即构成一个T触发器</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="第二章-fir滤波器">第二章 FIR滤波器</h1>
<ul>
<li>​有限脉冲响应(FIR)是数字信号处理中应用最广泛的运算。因为它们可以采用高度优化的体系结构，所以它们非常适合于硬件实现。</li>
<li>卷积公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>h</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>⋅</mo><mi>x</mi><mo>[</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">y[i]=\sum_{j=0}^{N-1} h[j] \cdot x[i-j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.417049em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></li>
<li>不同变量类型使用 typedef； 方便地更改数据类型。</li>
</ul>
<h2 id="最初版本代码">最初版本代码</h2>
<pre><code class="language-C++">#define N 11
#include &quot;ap_int.h&quot;

typedef int coef_t;
typedef int data_t;
typedef int acc_t;

/**
 * @description: 
 * @param {data_t} *y 经过滤波器的信号输出。
 * @param {data_t} x 信号输入。
 * @return {*}
 */
void fir(data_t *y, data_t x)
{
    coef_t C[N] = {
        53, 0, -91, 0, 313, 500, 313, 0, -91, 0, 53};
    // 可以把fir看成一个多次调用的函数。
    // 其中的static保证了每次进入不会初始化。
    // 这是声明一个放在RAM里面的数组。
    // shift_reg 是反着存的， 0：最近的一次的x
    // 这是一个11阶滤波器，我们必须存储之前的10个x的数据
    static data_t shift_reg[N];
    acc_t acc; // 累加量, accumulation
    int i;
    acc = 0;
Shift_Accum_Loop:
    for (i = N - 1; i &gt;= 0; i--)
    {
        if (i == 0)
        {
            // 最后一次就需要累加acc+保存该x值
            acc += x * C[0];
            shift_reg[0] = x;
        }
        else
        {
            // 对shift做一个向右移位操作
            shift_reg[i] = shift_reg[i - 1];
            acc += shift_reg[i] * C[i];
        }
    }
    // 只输出一个int，感觉应该可以直接return呀？
    *y = acc;
}
</code></pre>
<p>上述代码它是<strong>串行执行的</strong>，并且使用了大量不必要的控制逻辑。</p>
<p>其综合结果为：<br>
<img src="https://Busy-Bob.github.io/post-images/1610286998008.png" alt="" loading="lazy"></p>
<h2 id="去除for循环内部的ifelse">去除for循环内部的if/else</h2>
<ul>
<li>​<strong>for循环内部的if/else语句效率很低</strong>。可以将条件提出来，拆成两个循环：</li>
</ul>
<pre><code class="language-C++">TDL:
    for (i = N - 1; i &gt; 0; i--)
    {
        shift_reg[i] = shift_reg[i - 1];
    }
    shift_reg[0] = x;

    acc = 0;
MAC:
    for (i = N - 1; i &gt;= 0; i--)
    {
        acc += shift_reg[i] * C[i];
    }
</code></pre>
<p>其综合结果为：<br>
<img src="https://Busy-Bob.github.io/post-images/1610288163361.png" alt="" loading="lazy"><br>
可以注意到，这个结果比起最初结果：</p>
<ul>
<li>II(initial interval) 降低为1，即吞吐量提高了。</li>
<li>触发器(FF)数量显著降低。</li>
</ul>
<h2 id="手动将循环展开">手动将循环展开</h2>
<ul>
<li>将TDL部分将循环展开。</li>
</ul>
<pre><code class="language-C++">TDL:
    for (i = N - 1; i &gt; 1; i = i - 2)
    {
        shift_reg[i] = shift_reg[i - 1];
        shift_reg[i - 1] = shift_reg[i - 2];
    }
    if (i == 1)
    {
        shift_reg[1] = shift_reg[0];
    }
    shift_reg[0] = x;
</code></pre>
<ul>
<li>结果如下, 改进不大：<br>
<img src="https://Busy-Bob.github.io/post-images/1610290742981.png" alt="" loading="lazy"></li>
</ul>
<h2 id="最终版本">最终版本</h2>
<ul>
<li>直接对函数pipeline，中间的循环都会自动unroll。</li>
<li>将两个数组完全拆分。</li>
<li>使用ap_int<T>类型。</li>
</ul>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;
const int N=11;

typedef ap_int&lt;10&gt; coef_t;
typedef ap_int&lt;18&gt; data_t;
typedef ap_int&lt;18&gt; acc_t;

void fir(data_t *y, data_t x)
{
	const coef_t C[N] = {
		53, 0, -91, 0, 313, 500, 313, 0, -91, 0, 53};
	static data_t shift_reg[N];
	acc_t acc;
	int i;


TDL:
	for (i = N - 1; i &gt; 0; i--)
	{
		shift_reg[i] = shift_reg[i - 1];
	}
	shift_reg[0] = x;

	acc = 0;
MAC:
	for (i = N - 1; i &gt;= 0; i--)
	{
		acc += shift_reg[i] * C[i];
	}
	*y = acc;
}
</code></pre>
<p><img src="https://Busy-Bob.github.io/post-images/1610615772264.png" alt="" loading="lazy"><br>
<img src="https://Busy-Bob.github.io/post-images/1610615864930.png" alt="" loading="lazy"><br>
<img src="https://Busy-Bob.github.io/post-images/1610615876158.png" alt="" loading="lazy"></p>
<h1 id="第三章-cordic">第三章 CORDIC</h1>
<h2 id="简介">简介</h2>
<ul>
<li>CORDIC核心思想是在一个二维平面上高效地执行一组矢量旋转。</li>
<li>CORDIC已经广泛应用于信号处理、机器人技术、通信和许多科学计算领域。</li>
<li>由于CORDIC占用资源少，所以常用在FPGA设计中。</li>
<li><strong>旋转矩阵</strong>：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>(</mo><mi>θ</mi><mo>)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R(\theta)=\left[\begin{array}{cc}\cos \theta &amp; -\sin \theta \\ \sin \theta &amp; \cos \theta\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></li>
<li><strong>高效地矩阵旋转</strong>：
<ul>
<li>经过下列变换<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mi>tan</mi><mo>⁡</mo><mn>2</mn></msup><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></msqrt></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>sin</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mi>tan</mi><mo>⁡</mo><mn>2</mn></msup><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></msqrt></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \cos \left(\theta_{i}\right) &amp;=\frac{1}{\sqrt{1+\tan ^{2}\left(\theta_{i}\right)}} \\ \sin \left(\theta_{i}\right) &amp;=\frac{\tan \left(\theta_{i}\right)}{\sqrt{1+\tan ^{2}\left(\theta_{i}\right)}} \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.60844em;vertical-align:-2.55422em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05422em;"><span style="top:-5.15978em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.3027800000000003em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55422em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.05422em;"><span style="top:-5.15978em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.1404560000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9695439999999997em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop">tan</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8190879999999999em;"><span style="top:-3.0679800000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.929544em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27045600000000025em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3027800000000003em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.1404560000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9695439999999997em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop">tan</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8190879999999999em;"><span style="top:-3.0679800000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.929544em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,
158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067
c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,
175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71
c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,
-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26
s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27045600000000025em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.55422em;"><span></span></span></span></span></span></span></span></span></span></span></li>
<li>矩阵变成：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mi>tan</mi><mo>⁡</mo><mn>2</mn></msup><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></msqrt></mfrac><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R_{i}=\frac{1}{\sqrt{1+\tan ^{2}\left(\theta_{i}\right)}}\left[\begin{array}{cc}1 &amp; - \tan \left(\theta_{i}\right) \\ \tan \left(\theta_{i}\right) &amp; 1\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.4641625em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0369107142857144em;"><span class="svg-align" style="top:-3.428571428571429em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="mord mtight" style="padding-left:1.19em;"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mop mtight"><span class="mop mtight">tan</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span><span style="top:-3.0089107142857143em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.5428571428571431em;"><svg width='400em' height='1.5428571428571431em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4196607142857143em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8295999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></li>
<li>限制<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\tan \left(\theta_{i}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>是2的幂次，就可以将旋转变成数据移位的运算了。令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\tan \left(\theta_{i}\right)=2^{-i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span>, 则有<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo>=</mo><msub><mi>K</mi><mi>i</mi></msub><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">v_{i}=K_{i}\left[\begin{array}{cc}1 &amp; -2^{-i} \\ 2^{-i} &amp; 1\end{array}\right]\left[\begin{array}{l}x_{i-1} \\ y_{i-1}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn><mi>i</mi></mrow></msup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">K_{i}=\frac{1}{\sqrt{1+2^{-2 i}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.5379999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5407480000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9275028571428572em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.887502857142857em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11249714285714285em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
<li>上述只能旋转一些固定角度，但是可以用多次旋转去修正错误。其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>为1或-1表示修正<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo>=</mo><msub><mi>K</mi><mi>i</mi></msub><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>σ</mi><mi>i</mi></msub><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">v_{i}=K_{i}\left[\begin{array}{cc}1 &amp; -\sigma_{i} 2^{-i} \\ \sigma_{i} 2^{-i} &amp; 1\end{array}\right]\left[\begin{array}{l}x_{i-1} \\ y_{i-1}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>K</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn><mi>i</mi></mrow></msup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">K(n)=\prod_{i=0}^{n-1} K_{i}=\prod_{i=0}^{n-1} \frac{1}{\sqrt{1+2^{-2 i}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4920079999999998em;vertical-align:-0.5379999999999999em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5407480000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9275028571428572em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.887502857142857em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11249714285714285em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5379999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
<li>上述的K(n)是可以预先计算并储存的。</li>
<li>向左右移位在硬件上基本是无消耗的。</li>
</ul>
</li>
</ul>
<h2 id="直角坐标系转极坐标系第一版代码">直角坐标系转极坐标系：第一版代码</h2>
<pre><code class="language-C++">#define NO_ITER 16

typedef float data_t;

data_t Kvalues[NO_ITER] = {1, 0.500000000000000, 0.250000000000000, 0.125000000000000, 0.0625000000000000, 0.0312500000000000, 0.0156250000000000, 0.00781250000000000, 0.00390625000000000, 0.00195312500000000, 0.000976562500000000, 0.000488281250000000, 0.000244140625000000, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05};

data_t angles[NO_ITER] = {0.785398163397448, 0.463647609000806, 0.244978663126864, 0.124354994546761, 0.0624188099959574, 0.0312398334302683, 0.0156237286204768, 0.00781234106010111, 0.00390623013196697, 0.00195312251647882, 0.000976562189559320, 0.000488281211194898, 0.000244140620149362, 0.000122070311893670, 6.10351561742088e-05, 3.05175781155261e-05};

const data_t pi = 3.1415926535897932384626;

/**
 * @description:  coordinate to polar axis
 * @param {data_t} x  
 * @param {data_t} y
 * @param {data_t} *r
 * @param {data_t} *theta : radian system
 * @return {*}
 */
void cordiccart2pol(data_t x, data_t y, data_t *r, data_t *theta)
{
	// ratation degree
	data_t angle;
	data_t x_copy;
	data_t y_copy;
	// make the initial vector into I or IV Quadrant
	if (y &gt; 0)
	{
		x_copy = y;
		y_copy = -x;
		angle = 90 * pi / 180;
	}
	else
	{
		x_copy = -y;
		y_copy = x;
		angle = -90 * pi / 180;
	}

	// start rotating
	int sigma;
ROTATE:
	for (int i = 0; i &lt; NO_ITER; i++)
	{
		if (y_copy &gt; 0)
		{
			sigma = -1;
		}
		else
		{
			sigma = 1;
		}
		data_t y_temp = y_copy;
		data_t x_temp = x_copy;
		data_t K_temp = Kvalues[i];
		x_copy -= sigma * y_temp * K_temp;
		y_copy += sigma * x_temp * K_temp;
		angle -= sigma * angles[i];
	}

	*theta = angle;
	*r = x_copy * 0.607253;
}
</code></pre>
<ul>
<li>ROTATE循环的条件判断中的y_copy是需要上一次的结果，所以没法切流水。</li>
<li>有一个对循环做Pipeline的优化， 但是综合并没有实现pipeline。</li>
<li>综合结果分析中显示， y_temp * K_temp并不是用移位操作做的，而是直接调用的浮点数计算，所以没有达到简化的目标。</li>
<li>综合结果如下：<br>
<img src="https://Busy-Bob.github.io/post-images/1610701571647.png" alt="" loading="lazy"></li>
</ul>
<h2 id="直角坐标系转极坐标系第二版代码">直角坐标系转极坐标系：第二版代码</h2>
<pre><code class="language-C++">#define NO_ITER 16

typedef ap_fixed&lt;18, 3, AP_RND&gt; data_t;

data_t Kvalues[NO_ITER] = {1, 0.500000000000000, 0.250000000000000, 0.125000000000000, 0.0625000000000000, 0.0312500000000000, 0.0156250000000000, 0.00781250000000000, 0.00390625000000000, 0.00195312500000000, 0.000976562500000000, 0.000488281250000000, 0.000244140625000000, 0.000122070312500000, 6.10351562500000e-05, 3.05175781250000e-05};

data_t angles[NO_ITER] = {0.785398163397448, 0.463647609000806, 0.244978663126864, 0.124354994546761, 0.0624188099959574, 0.0312398334302683, 0.0156237286204768, 0.00781234106010111, 0.00390623013196697, 0.00195312251647882, 0.000976562189559320, 0.000488281211194898, 0.000244140620149362, 0.000122070311893670, 6.10351561742088e-05, 3.05175781155261e-05};

const data_t pi = 3.1415926535897932384626;

/**
 * @description:  coordinate to polar axis
 * @param {data_t} x  
 * @param {data_t} y
 * @param {data_t} *r
 * @param {data_t} *theta : radian system
 * @return {*}
 */
void cordiccart2pol(data_t x, data_t y, data_t *r, data_t *theta)
{
	// ratation degree
	data_t angle;
	data_t x_copy;
	data_t y_copy;
	// make the initial vector into I or IV Quadrant
	if (y &gt; 0)
	{
		x_copy = y;
		y_copy = -x;
		angle = pi &gt;&gt; 1;
	}
	else
	{
		x_copy = -y;
		y_copy = x;
		angle = -pi &gt;&gt; 1;
	}

	// start rotating
	int sigma;
ROTATE:
	for (int i = 0; i &lt; NO_ITER; i++)
	{
		if (y_copy &gt; 0)
		{
			sigma = -1;
		}
		else
		{
			sigma = 1;
		}
		data_t y_temp = y_copy;
		data_t x_temp = x_copy;
		x_copy -= sigma * y_temp &gt;&gt; i;
		y_copy += sigma * x_temp &gt;&gt; i;
		angle -= sigma * angles[i];
	}


	data_t scale = 0.607253;
	*theta = angle;
	*r = scale * x_copy;
}

</code></pre>
<ul>
<li>结果测试的误差大概在1e-4这个量级。</li>
<li>定点数采用的是18位宽，3位整数的浮点数，中间的乘法运算改成移位运算。</li>
<li>有一个对循环做Pipeline的优化</li>
<li><strong>综合结果</strong>如下：<br>
<img src="https://Busy-Bob.github.io/post-images/1610701891162.png" alt="" loading="lazy"></li>
<li>相比于浮点数，减少了80% +的器件和时间消耗。</li>
<li><strong>分析结果</strong>如下：<br>
<img src="https://Busy-Bob.github.io/post-images/1610702879217.png" alt="" loading="lazy"></li>
<li>HLS自动对sigma进行了优化，所以if应该不用手动改成两套不同电路。</li>
<li>因为<code>y_copy += sigma * x_temp &gt;&gt; i;</code> 计算速度很快， 所以可以在一个周期内返回值，因此可以将该循环的II = 1。</li>
<li>由于angles的读取速度较慢 ( &gt; 1 周期)， 导致了<code>angle -= sigma * angles[i];</code> 需要在第二个状态才能计算，从而使得latency = 2.</li>
</ul>
<h2 id="直角坐标系转极坐标系直接对函数进行pipeline">直角坐标系转极坐标系：直接对函数进行pipeline</h2>
<ul>
<li>结果如下：<br>
<img src="https://Busy-Bob.github.io/post-images/1610704528419.png" alt="" loading="lazy"></li>
<li>II = 1， latency = 13，资源占用率有一定的提升(相当于从一个模块处理变成了16个模块同时处理)。</li>
</ul>
<h1 id="第四章-离散傅里叶变换dft">第四章 离散傅里叶变换(DFT)</h1>
<h2 id="基础">基础</h2>
<ul>
<li>DFT 变换起始类似与矩阵乘法。</li>
<li>将离散信号乘以下列矩阵就可以得到DFT结果：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>s</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mn>2</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mn>4</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mrow><mn>2</mn><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mn>3</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mn>6</mn></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mrow><mn>3</mn><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mrow><mn>2</mn><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>s</mi><mrow><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">S=\left[\begin{array}{ccccc}1 &amp; 1 &amp; 1 &amp; \cdots &amp; 1 \\ 1 &amp; s &amp; s^{2} &amp; \cdots &amp; s^{N-1} \\ 1 &amp; s^{2} &amp; s^{4} &amp; \cdots &amp; s^{2(N-1)} \\ 1 &amp; s^{3} &amp; s^{6} &amp; \cdots &amp; s^{3(N-1)} \\ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 1 &amp; s^{N-1} &amp; s^{2(N-1)} &amp; \cdots &amp; s^{(N-1)(N-1)}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:8.005331000000002em;vertical-align:-3.752665500000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.156985000000001em;"><span style="top:-0.14996500000000068em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.3049650000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-1.9059650000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.5069650000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1079650000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7089650000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.309965em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.910965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-6.156985em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6500549999999996em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.252665500000001em;"><span style="top:-7.1001655em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8988345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.6508345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.4028344999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.542834499999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.29483449999999917em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.752665500000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.252665500000001em;"><span style="top:-7.1001655em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8988345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-4.6508345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.4028344999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.542834499999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.29483449999999917em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.752665500000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.252665500000001em;"><span style="top:-7.1001655em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8988345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-4.6508345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.4028344999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.542834499999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.29483449999999917em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.752665500000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.252665500000001em;"><span style="top:-6.9126655em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.7113345em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.4633345em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.2153344999999995em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.355334499999999em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-0.10733449999999917em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.752665500000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.252665500000001em;"><span style="top:-7.1001655em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.8988345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-4.6508345em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.4028344999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.542834499999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.29483449999999917em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.752665500000001em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.156985000000001em;"><span style="top:-0.14996500000000068em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.3049650000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-1.9059650000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.5069650000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1079650000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7089650000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.309965em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.910965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-6.156985em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6500549999999996em;"><span></span></span></span></span></span></span></span></span></span></span></li>
<li>其中的：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mo>−</mo><mi>j</mi><mn>2</mn><mi>π</mi></mrow><mi>N</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">s=e^{\frac{-j 2 \pi}{N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.01643em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.01643em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9334714285714286em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.4623857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>通常我们也会把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mi>π</mi></mrow><mi>N</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{2 \pi}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></li>
<li>DFT 的矩阵运算即是：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mi>S</mi><mo>⋅</mo><mi>g</mi></mrow><annotation encoding="application/x-tex">G=S \cdot g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 表示的就是DFT变换之后的结果。也即是：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>[</mo><mi>k</mi><mo>]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>g</mi><mo>[</mo><mi>n</mi><mo>]</mo><msup><mi>s</mi><mrow><mi>k</mi><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">G[k]=\sum_{n=0}^{N-1} g[n] s^{k n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k=0, \ldots, N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
<li>在计算时候为了简便，通常使用欧拉公式，将复数运算变成三角运算：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>x</mi></mrow></msup><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>i</mi><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">e^{i x}=\cos x+i \sin x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span></li>
</ul>
<h2 id="baseline">Baseline</h2>
<pre><code class="language-C++">#include&lt;math.h&gt; //Required for cos and sin functions
#include &quot;dft.h&quot;
#define N 256                            // DFT Size

void dft(IN_TYPE sample_real[N], IN_TYPE sample_imag[N]) {
    int i, j;
    TEMP_TYPE w;
    TEMP_TYPE c, s;

    // Temporary arrays to hold the intermediate frequency domain results
    TEMP_TYPE temp_real[N];
    TEMP_TYPE temp_imag[N];

    // Calculate each frequency domain sample iteratively
    for (i = 0; i &lt; N; i += 1) {
        temp_real[i] = 0;
        temp_imag[i] = 0;

        // (2 * pi * i)/N
        w = (-2.0 * 3.141592653589  / N) * (TEMP_TYPE)i;

        // Calculate the jth frequency sample sequentially
        for (j = 0; j &lt; N; j += 1) {
            // Utilize HLS tool to calculate sine and cosine values
            c = cos(j * w);
            s = sin(j * w);

            // Multiply the current phasor with the appropriate input sample and keep
            // running sum
            temp_real[i] += (sample_real[j] * c - sample_imag[j] * s);
            temp_imag[i] += (sample_real[j] * s + sample_imag[j] * c);
        }
    }

    // Perform an inplace DFT, i.e., copy result into the input arrays
    for (i = 0; i &lt; N; i += 1) {
        sample_real[i] = temp_real[i];
        sample_imag[i] = temp_imag[i];
    }
}

</code></pre>
<ul>
<li>作者提供代码中w计算少了一个负号。</li>
<li>综合结果：<br>
<img src="https://Busy-Bob.github.io/post-images/1610727520545.png" alt="" loading="lazy"></li>
<li>latency 和 area 均很高</li>
</ul>
<h2 id="优化0-查表代替计算">优化0： 查表代替计算：</h2>
<pre><code class="language-C++">			// 由于已经储存了[0,2pi) 的 cos 和 -sin 的值 (共256个)
			// 所以只需要查表找到该值即可
			int index = (i * j) % N;
			c = cos_coefficients_table[index];
			s = sin_coefficients_table[index];
</code></pre>
<ul>
<li>综合结果：<br>
<img src="https://Busy-Bob.github.io/post-images/1610727662965.png" alt="" loading="lazy"></li>
<li>latency 和 area均有大幅度降低。</li>
</ul>
<h2 id="优化1定点数代替浮点数">优化1：定点数代替浮点数</h2>
<pre><code class="language-C++">typedef ap_fixed&lt;32, 18, AP_RND&gt; DTYPE;
typedef ap_fixed&lt;32, 18, AP_RND&gt; IN_TYPE;        // Data type for the input signal
typedef ap_fixed&lt;32, 18, AP_RND&gt; TEMP_TYPE; // Data type for the temporary variables
</code></pre>
<ul>
<li>使用32位宽，18位整数的定点数，可以满足误差要求。</li>
<li>能够极大减少器件数量， 一定程度上减少计算时间。</li>
<li>综合结果：<br>
<img src="https://Busy-Bob.github.io/post-images/1610727706323.png" alt="" loading="lazy"></li>
</ul>
<h2 id="优化2-循环交换或流水线交织处理-内层循环流水线">优化2: 循环交换或流水线交织处理 + 内层循环流水线</h2>
<ul>
<li>瓶颈在temp_real[i]和sample_real[j] 的读取上。</li>
<li>考虑到矩阵乘法实际上以列来做更好，每一列都乘以一个同样的元素，可以将内层外层循环交换，即先列后行循环。</li>
<li>最终代码：</li>
</ul>
<pre><code class="language-C++">#include &quot;dft.h&quot;

const DTYPE cos_coefficients_table[]={1.000000,0.999699,0.998795,0.997290,0.995185,0.992480,0.989177,0.985278,0.980785,0.975702,0.970031,0.963776,0.956940,0.949528,0.941544,0.932993,0.923880,0.914210,0.903989,0.893224,0.881921,0.870087,0.857729,0.844854,0.831470,0.817585,0.803208,0.788346,0.773010,0.757209,0.740951,0.724247,0.707107,0.689541,0.671559,0.653173,0.634393,0.615232,0.595699,0.575808,0.555570,0.534998,0.514103,0.492898,0.471397,0.449611,0.427555,0.405241,0.382683,0.359895,0.336890,0.313682,0.290285,0.266713,0.242980,0.219101,0.195090,0.170962,0.146730,0.122411,0.098017,0.073565,0.049068,0.024541,0.000000,-0.024541,-0.049068,-0.073565,-0.098017,-0.122411,-0.146730,-0.170962,-0.195090,-0.219101,-0.242980,-0.266713,-0.290285,-0.313682,-0.336890,-0.359895,-0.382683,-0.405241,-0.427555,-0.449611,-0.471397,-0.492898,-0.514103,-0.534998,-0.555570,-0.575808,-0.595699,-0.615232,-0.634393,-0.653173,-0.671559,-0.689541,-0.707107,-0.724247,-0.740951,-0.757209,-0.773010,-0.788346,-0.803208,-0.817585,-0.831470,-0.844854,-0.857729,-0.870087,-0.881921,-0.893224,-0.903989,-0.914210,-0.923880,-0.932993,-0.941544,-0.949528,-0.956940,-0.963776,-0.970031,-0.975702,-0.980785,-0.985278,-0.989177,-0.992480,-0.995185,-0.997290,-0.998795,-0.999699,-1.000000,-0.999699,-0.998795,-0.997290,-0.995185,-0.992480,-0.989177,-0.985278,-0.980785,-0.975702,-0.970031,-0.963776,-0.956940,-0.949528,-0.941544,-0.932993,-0.923880,-0.914210,-0.903989,-0.893224,-0.881921,-0.870087,-0.857729,-0.844854,-0.831470,-0.817585,-0.803208,-0.788346,-0.773010,-0.757209,-0.740951,-0.724247,-0.707107,-0.689541,-0.671559,-0.653173,-0.634393,-0.615232,-0.595699,-0.575808,-0.555570,-0.534998,-0.514103,-0.492898,-0.471397,-0.449611,-0.427555,-0.405241,-0.382683,-0.359895,-0.336890,-0.313682,-0.290285,-0.266713,-0.242980,-0.219101,-0.195090,-0.170962,-0.146730,-0.122411,-0.098017,-0.073565,-0.049068,-0.024541,-0.000000,0.024541,0.049068,0.073565,0.098017,0.122411,0.146730,0.170962,0.195090,0.219101,0.242980,0.266713,0.290285,0.313682,0.336890,0.359895,0.382683,0.405241,0.427555,0.449611,0.471397,0.492898,0.514103,0.534998,0.555570,0.575808,0.595699,0.615232,0.634393,0.653173,0.671559,0.689541,0.707107,0.724247,0.740951,0.757209,0.773010,0.788346,0.803208,0.817585,0.831470,0.844854,0.857729,0.870087,0.881921,0.893224,0.903989,0.914210,0.923880,0.932993,0.941544,0.949528,0.956940,0.963776,0.970031,0.975702,0.980785,0.985278,0.989177,0.992480,0.995185,0.997290,0.998795,0.999699};
const DTYPE sin_coefficients_table[]={0.000000,-0.024541,-0.049068,-0.073565,-0.098017,-0.122411,-0.146730,-0.170962,-0.195090,-0.219101,-0.242980,-0.266713,-0.290285,-0.313682,-0.336890,-0.359895,-0.382683,-0.405241,-0.427555,-0.449611,-0.471397,-0.492898,-0.514103,-0.534998,-0.555570,-0.575808,-0.595699,-0.615232,-0.634393,-0.653173,-0.671559,-0.689541,-0.707107,-0.724247,-0.740951,-0.757209,-0.773010,-0.788346,-0.803208,-0.817585,-0.831470,-0.844854,-0.857729,-0.870087,-0.881921,-0.893224,-0.903989,-0.914210,-0.923880,-0.932993,-0.941544,-0.949528,-0.956940,-0.963776,-0.970031,-0.975702,-0.980785,-0.985278,-0.989177,-0.992480,-0.995185,-0.997290,-0.998795,-0.999699,-1.000000,-0.999699,-0.998795,-0.997290,-0.995185,-0.992480,-0.989177,-0.985278,-0.980785,-0.975702,-0.970031,-0.963776,-0.956940,-0.949528,-0.941544,-0.932993,-0.923880,-0.914210,-0.903989,-0.893224,-0.881921,-0.870087,-0.857729,-0.844854,-0.831470,-0.817585,-0.803208,-0.788346,-0.773010,-0.757209,-0.740951,-0.724247,-0.707107,-0.689541,-0.671559,-0.653173,-0.634393,-0.615232,-0.595699,-0.575808,-0.555570,-0.534998,-0.514103,-0.492898,-0.471397,-0.449611,-0.427555,-0.405241,-0.382683,-0.359895,-0.336890,-0.313682,-0.290285,-0.266713,-0.242980,-0.219101,-0.195090,-0.170962,-0.146730,-0.122411,-0.098017,-0.073565,-0.049068,-0.024541,-0.000000,0.024541,0.049068,0.073565,0.098017,0.122411,0.146730,0.170962,0.195090,0.219101,0.242980,0.266713,0.290285,0.313682,0.336890,0.359895,0.382683,0.405241,0.427555,0.449611,0.471397,0.492898,0.514103,0.534998,0.555570,0.575808,0.595699,0.615232,0.634393,0.653173,0.671559,0.689541,0.707107,0.724247,0.740951,0.757209,0.773010,0.788346,0.803208,0.817585,0.831470,0.844854,0.857729,0.870087,0.881921,0.893224,0.903989,0.914210,0.923880,0.932993,0.941544,0.949528,0.956940,0.963776,0.970031,0.975702,0.980785,0.985278,0.989177,0.992480,0.995185,0.997290,0.998795,0.999699,1.000000,0.999699,0.998795,0.997290,0.995185,0.992480,0.989177,0.985278,0.980785,0.975702,0.970031,0.963776,0.956940,0.949528,0.941544,0.932993,0.923880,0.914210,0.903989,0.893224,0.881921,0.870087,0.857729,0.844854,0.831470,0.817585,0.803208,0.788346,0.773010,0.757209,0.740951,0.724247,0.707107,0.689541,0.671559,0.653173,0.634393,0.615232,0.595699,0.575808,0.555570,0.534998,0.514103,0.492898,0.471397,0.449611,0.427555,0.405241,0.382683,0.359895,0.336890,0.313682,0.290285,0.266713,0.242980,0.219101,0.195090,0.170962,0.146730,0.122411,0.098017,0.073565,0.049068,0.024541};

#define N 256                            // DFT Size

void dft(IN_TYPE sample_real[N], IN_TYPE sample_imag[N]) {
    int i, j;
    TEMP_TYPE w;
    TEMP_TYPE c, s;

    // Temporary arrays to hold the intermediate frequency domain results
    TEMP_TYPE temp_real[N] = {0};
    TEMP_TYPE temp_imag[N] = {0};

    // Calculate each frequency domain sample iteratively
    OUTER:for (j = 0; j &lt; N; j += 1) {

        // (2 * pi * i)/N
        // w = (-2.0 * 3.141592653589  / N) * (TEMP_TYPE)i;

        // Calculate the jth frequency sample sequentially
        INNER:for (i = 0; i &lt; N; i += 1) {
            // Utilize HLS tool to calculate sine and cosine values
            // c = cos(j * w);
            // s = sin(j * w);
			// 由于已经储存了[0,2pi) 的 cos 和 -sin 的值 (共256个)
			// 所以只需要查表找到该值即可
			int index = (i * j) % N;
			c = cos_coefficients_table[index];
			s = sin_coefficients_table[index];


            // Multiply the current phasor with the appropriate input sample and keep
            // running sum
            temp_real[i] += (sample_real[j] * c - sample_imag[j] * s);
            temp_imag[i] += (sample_real[j] * s + sample_imag[j] * c);
        }
    }

    // Perform an inplace DFT, i.e., copy result into the input arrays
    for (i = 0; i &lt; N; i += 1) {
        sample_real[i] = temp_real[i];
        sample_imag[i] = temp_imag[i];
    }
}

</code></pre>
<ul>
<li>综合结果：<br>
<img src="https://Busy-Bob.github.io/post-images/1610728357436.png" alt="" loading="lazy"></li>
<li>可以实现II=1的流水<br>
<img src="https://Busy-Bob.github.io/post-images/1610726581333.png" alt="" loading="lazy"></li>
<li>这个双层循环已经是一个完美嵌套循环（可以更好优化），所以HLS在处理中是当作一个循环来处理的。</li>
</ul>
<h2 id="hlsstream-实现">hls::stream 实现</h2>
<pre><code class="language-C++">void dft_stream(hls::stream&lt;IN_TYPE&gt; &amp;sample_real, hls::stream&lt;IN_TYPE&gt; &amp;sample_imag,
		hls::stream&lt;IN_TYPE&gt; &amp;output_real, hls::stream&lt;IN_TYPE&gt; &amp;output_imag) {
    int i, j;
    TEMP_TYPE w;
    TEMP_TYPE c, s;

    // Temporary arrays to hold the intermediate frequency domain results
    TEMP_TYPE temp_real[N] = {0};
    TEMP_TYPE temp_imag[N] = {0};

    // Calculate each frequency domain sample iteratively
    OUTER:for (j = 0; j &lt; N; j += 1) {

    	IN_TYPE sample_real_temp = sample_real.read();
    	IN_TYPE sample_imag_temp = sample_imag.read();
        // Calculate the jth frequency sample sequentially
        INNER:for (i = 0; i &lt; N; i += 1) {
			// 由于已经储存了[0,2pi) 的 cos 和 -sin 的值 (共256个)
			// 所以只需要查表找到该值即可
			int index = (i * j) % N;
			c = cos_coefficients_table[index];
			s = sin_coefficients_table[index];

            // Multiply the current phasor with the appropriate input sample and keep
            // running sum
            temp_real[i] += (sample_real_temp * c - sample_imag_temp * s);
            temp_imag[i] += (sample_real_temp * s + sample_imag_temp * c);
        }
    }

    // Perform an inplace DFT, i.e., copy result into the input arrays
    for (i = 0; i &lt; N; i += 1) {
    	output_real.write(temp_real[i]);
    	output_imag.write(temp_imag[i]);
    }
}
</code></pre>
<ul>
<li>综合结果和优化2结果类似。</li>
</ul>
<h1 id="第五章-快速傅里叶变换fft">第五章 快速傅里叶变换（FFT）</h1>
<ul>
<li>当取样样本数量为N时，直接使用矩阵向量乘法来执行离散傅里叶变换需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>次乘法和加法操作。</li>
<li>S矩阵具有大量冗余</li>
<li>快速傅立叶变换（FFT）使用基于S矩阵对称性的分块处理方法，它需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>复杂度</li>
<li>两点FFT：<br>
<img src="https://Busy-Bob.github.io/post-images/1610951804872.jpg" alt="" loading="lazy"></li>
<li>四点FFT：<br>
<img src="https://Busy-Bob.github.io/post-images/1610951820745.jpg" alt="" loading="lazy"></li>
<li>八点FFT（其中的bit reverse 只需要将bit左右颠倒就好了 001 -&gt; 100）：<br>
<img src="https://Busy-Bob.github.io/post-images/1610951841265.jpg" alt="" loading="lazy"></li>
<li>递归关系：<br>
<img src="https://Busy-Bob.github.io/post-images/1610951872719.jpg" alt="" loading="lazy"></li>
</ul>
<h2 id="代码">代码</h2>
<pre><code class="language-C++">#include &quot;fft.h&quot;


void bit_reverse(DTYPE X_R[SIZE], DTYPE X_I[SIZE], DTYPE OUT_R[SIZE], DTYPE OUT_I[SIZE]);
template&lt;int STAGE&gt;
void fft_stages (DTYPE X_R[SIZE], DTYPE X_I[SIZE], DTYPE OUT_R[SIZE], DTYPE OUT_I[SIZE]);

void fft(DTYPE X_R[SIZE], DTYPE X_I[SIZE], DTYPE OUT_R[SIZE], DTYPE OUT_I[SIZE])
{
	

	//Call fft
	DTYPE Stage0_R[SIZE], Stage0_I[SIZE];
	DTYPE Stage1_R[SIZE], Stage1_I[SIZE];
	DTYPE Stage2_R[SIZE], Stage2_I[SIZE];
	DTYPE Stage3_R[SIZE], Stage3_I[SIZE];
	DTYPE Stage4_R[SIZE], Stage4_I[SIZE];
	DTYPE Stage5_R[SIZE], Stage5_I[SIZE];
	DTYPE Stage6_R[SIZE], Stage6_I[SIZE];
	DTYPE Stage7_R[SIZE], Stage7_I[SIZE];
	DTYPE Stage8_R[SIZE], Stage8_I[SIZE];
	DTYPE Stage9_R[SIZE], Stage9_I[SIZE];

	bit_reverse(X_R, X_I, Stage0_R, Stage0_I);
	fft_stages&lt;1&gt;(Stage0_R, Stage0_I, Stage1_R, Stage1_I);
	fft_stages&lt;2&gt;(Stage1_R, Stage1_I, Stage2_R, Stage2_I);
	fft_stages&lt;3&gt;(Stage2_R, Stage2_I, Stage3_R, Stage3_I);
	fft_stages&lt;4&gt;(Stage3_R, Stage3_I, Stage4_R, Stage4_I);
	fft_stages&lt;5&gt;(Stage4_R, Stage4_I, Stage5_R, Stage5_I);
	fft_stages&lt;6&gt;(Stage5_R, Stage5_I, Stage6_R, Stage6_I);
	fft_stages&lt;7&gt;(Stage6_R, Stage6_I, Stage7_R, Stage7_I);
	fft_stages&lt;8&gt;(Stage7_R, Stage7_I, Stage8_R, Stage8_I);
	fft_stages&lt;9&gt;(Stage8_R, Stage8_I, Stage9_R, Stage9_I);
	fft_stages&lt;10&gt;(Stage9_R, Stage9_I, OUT_R, OUT_I);
}

unsigned int reverse_bits(unsigned int input)
{
	int i, rev = 0;
	for (i = 0; i &lt; M; i++)
	{
		rev = (rev &lt;&lt; 1) | (input &amp; 1);
		input = input &gt;&gt; 1;
	}
	return rev;
}

void bit_reverse(DTYPE X_R[SIZE], DTYPE X_I[SIZE], DTYPE OUT_R[SIZE], DTYPE OUT_I[SIZE])
{
	unsigned int reversed;
	unsigned int i;
	DTYPE temp;

	for (i = 0; i &lt; SIZE; i++)
	{
		reversed = reverse_bits(i); // Find the bit reversed index
		OUT_R[reversed] = X_R[i];
		OUT_I[reversed] = X_I[i];
	}
}
/*=======================BEGIN: FFT=========================*/


//stages
template&lt;int STAGE&gt;
void fft_stages (DTYPE X_R[SIZE], DTYPE X_I[SIZE], DTYPE OUT_R[SIZE], DTYPE OUT_I[SIZE])
{
	//Insert your code here
	int DFTpts = 1 &lt;&lt; STAGE; // DFT = 2^stage = points in sub DFT
	int numBF = DFTpts &gt;&gt; 1;	 // Butterfly WIDTHS in sub-DFT
	DTYPE e = -6.283185307178 / DFTpts;
// Perform butterflies for j-th stage

butterfly_loop:
	for (int j = 0; j &lt; (1 &lt;&lt; (STAGE - 1)); j++)
	{
	// Compute butterflies that use same W**k
	dft_loop:
		for (int k = 0; k &lt; (1 &lt;&lt; (M - STAGE)); k++)
		// for (int i = j; i &lt; SIZE; i += (1 &lt;&lt; STAGE))
		{
			int i = j + k * (1 &lt;&lt; STAGE);

			DTYPE c = W_real[j &lt;&lt; (M - STAGE)];
			DTYPE s = W_imag[j &lt;&lt; (M - STAGE)];
			int i_lower = i + (1 &lt;&lt; (STAGE - 1)); // index of lower point in butterfly
			DTYPE temp_R = X_R[i_lower] * c - X_I[i_lower] * s;
			DTYPE temp_I = X_I[i_lower] * c + X_R[i_lower] * s;
			
			OUT_R[i_lower] = X_R[i] - temp_R;
			OUT_I[i_lower] = X_I[i] - temp_I;
			OUT_R[i] = X_R[i] + temp_R;
			OUT_I[i] = X_I[i] + temp_I;
		}
	}
}

/*=======================END: FFT=========================*/
</code></pre>
<ul>
<li>使用dataflow优化时候，不能同时读写一个函数的参数。否则会报错：Argument 'X_R' failed dataflow checking: Cannot read as well as write over function parameter.</li>
<li>循环边界最好为常数，不然无法统计trip_count。</li>
<li>设置内层II=1，最终结果是6212 CLK</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pynq debug记录]]></title>
        <id>https://Busy-Bob.github.io/post/pynq-debug-ji-lu/</id>
        <link href="https://Busy-Bob.github.io/post/pynq-debug-ji-lu/">
        </link>
        <updated>2021-01-12T05:48:41.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一些debug的结果。</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一些debug的结果。</p>
<!-- more -->
<h1 id="dma-direct-memory-access-问题">DMA （Direct Memory Access） 问题：</h1>
<p>代码过程参考<a href="https://pynq.readthedocs.io/en/latest/overlay_design_methodology/overlay_tutorial.html">Overlay Tutorial</a></p>
<ul>
<li><a href="https://www.fpgadeveloper.com/2014/08/using-the-axi-dma-in-vivado.html/">DMA的使用</a>：
<ul>
<li>MM2S stands for Memory-Mapped to Streaming, whereas S2MM stands for Streaming to Memory-Mapped.</li>
<li>下图与<a href="https://pynq.readthedocs.io/en/latest/overlay_design_methodology/overlay_tutorial.html">Overlay Tutorial</a>对应关系：
<ul>
<li>AXI DATA FIFO 对应 HLS 生成的 constant multiply 模块。</li>
<li>DDR memory controller 对应 AXI Interconnect IP核。<br>
<img src="https://Busy-Bob.github.io/post-images/1610431075588.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
</li>
<li>下面的代码Vivado HLS 2019.1  和 Vitis HLS 2020.2 的HLS结果不一样，Vitis 没有 Tlast等DMA需要的信号，并且数据宽度为8位。</li>
</ul>
<pre><code class="language-C++">#include &quot;ap_axi_sdata.h&quot;
typedef ap_axiu&lt;32,1,1,1&gt; stream_type;

void mult_constant(stream_type* in_data, stream_type* out_data, ap_int&lt;32&gt; constant) {
#pragma HLS INTERFACE s_axilite register port=constant
#pragma HLS INTERFACE ap_ctrl_none port=return
#pragma HLS INTERFACE axis port=in_data
#pragma HLS INTERFACE axis port=out_data
    out_data-&gt;data = in_data-&gt;data * constant;
    out_data-&gt;dest = in_data-&gt;dest;
    out_data-&gt;id = in_data-&gt;id;
    out_data-&gt;keep = in_data-&gt;keep;
    out_data-&gt;last = in_data-&gt;last;
    out_data-&gt;strb = in_data-&gt;strb;
    out_data-&gt;user = in_data-&gt;user;

}
</code></pre>
<p><img src="https://Busy-Bob.github.io/post-images/1610431712612.png" alt="" loading="lazy"><br>
<img src="https://Busy-Bob.github.io/post-images/1610431721170.png" alt="" loading="lazy"></p>
<ul>
<li>DMA 开启 Scatter Gather 后， 1、输入时候提示内存地址没有对齐6bytes。2、会导致recvchannel.wait()，系统陷入等待。关闭即<a href="https://discuss.pynq.io/t/fifo-using-pynq-dma/528">恢复正常</a>。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Xilinx FPGA 板上结构知识杂记]]></title>
        <id>https://Busy-Bob.github.io/post/xilinx-fpga-ban-shang-jie-gou-zhi-shi-za-ji/</id>
        <link href="https://Busy-Bob.github.io/post/xilinx-fpga-ban-shang-jie-gou-zhi-shi-za-ji/">
        </link>
        <updated>2021-01-10T06:04:54.000Z</updated>
        <summary type="html"><![CDATA[<p>一点xilinx fpga 板上结构的知识点，记录下来。主要参考《基于FPGA的数字信号处理》一书第八章。</p>
]]></summary>
        <content type="html"><![CDATA[<p>一点xilinx fpga 板上结构的知识点，记录下来。主要参考《基于FPGA的数字信号处理》一书第八章。</p>
<!-- more -->
<h1 id="lut和slice">LUT和Slice</h1>
<ul>
<li>zynq-7000中使用的查找表(Look Up Table，LUT)是6位的，其中包含一个5位的LUT。（6位需要的SRAM空间是2^6=64bit，5位是32bit。这应该也是为什么需要一个LUT5来构成LUT6了。）<br>
<img src="https://Busy-Bob.github.io/post-images/1610258789689.png" alt="" loading="lazy"></li>
<li>LUT可以作为RAM和ROM，<strong>逻辑输入作为地址线</strong>，内存作为ROM或者RAM，见<a href="https://electronics.stackexchange.com/a/85465">How does a LUT work, why is it used?</a>。其中SLICEL(slice logic)只能作为ROM，而SLICEM(slice memory)可以作为ROM和分布式的RAM。</li>
</ul>
<table>
<thead>
<tr>
<th>LUT功能</th>
<th>SLICEL</th>
<th>SLICEM</th>
</tr>
</thead>
<tbody>
<tr>
<td>逻辑函数发生器</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>ROM</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>分布式RAM</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td>移位寄存器</td>
<td></td>
<td>√</td>
</tr>
</tbody>
</table>
<ul>
<li>作为RAM也可以有多种类型，各种需要不同数量的LUT。<br>
<img src="https://Busy-Bob.github.io/post-images/1610268719145.png" alt="" loading="lazy"></li>
<li>SLICEM中1个LUT6可配置为1个32bit的移位寄存器，<strong>逻辑输入端口作为时钟周期延时数</strong>，所以在Xilinx FPGA中实现FIFO的功能，可采用Block RAM的方式，也可采用LUT的方式。</li>
<li>一个LUT6可实现4选1的MUX （数据4位，地址2位）。</li>
<li>一个F7MUX和相邻的两个LUT6可实现一个8选1的MUX。因此，一个SLICE可实现2个8选1的MUX。</li>
<li>4个LUT6、F7AMUX、F7BMUX和F8MUX可实现一个16选1的MUX。因此，一个SLICE可实现一个16选1的MUX</li>
</ul>
<h1 id="dsp基本功能是做乘法运算">DSP：基本功能是做乘法运算</h1>
<ul>
<li>zynq中的DSP(Digital Signal Processing)部分是由DSP48E1组成的，组成基本结构如图：<br>
<img src="https://Busy-Bob.github.io/post-images/1610267218196.png" alt="" loading="lazy"></li>
<li>由五部分构成：
<ul>
<li>对外端口</li>
<li><strong>预加器</strong>(pre-adder)</li>
<li><strong>乘法器</strong>(MULT)</li>
<li><strong>逻辑运算单元</strong>(ALU)</li>
<li>模式检测电路<br>
<img src="https://Busy-Bob.github.io/post-images/1610267326031.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>对外<strong>端口</strong>有：
<ul>
<li>操作数输入输出端口</li>
<li>模式配置端口</li>
<li>级联端口<br>
<img src="https://Busy-Bob.github.io/post-images/1610267484853.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>简化结构图为：<br>
<img src="https://Busy-Bob.github.io/post-images/1610267801525.png" alt="" loading="lazy"></li>
<li>单指令多数据模式即SIMD ( Single Instruction, Multiple Data)。它使得48bit的ALU可配置为4个 12bit的ALU (执行加法、减法或位逻辑运算)或者2个24bit的ALU。</li>
<li>采用VHDL或Verilog代码描述时，<strong>乘法、乘加/乘减和乘累加运算会被自动映射为 DSP48E1,而加法、减法和累加运算默认情况下釆用常规逻辑资源实现</strong>。若也希望它们被映 射为DSP48E1,则需要通过综合属性use_dsp48对其进行约束。</li>
<li>应用：
<ul>
<li>48bit累加运算(比加法器多一个寄存器用来存取前面加过的数据，寄存器是需要时钟驱动的。)</li>
<li>2输入48bit数据相加之后累加</li>
<li>96bit加法、减法运算（需要级联）</li>
<li>96bit累加运算（需要级联）</li>
<li>乘累加运算(两个输入数据相乘并对乘积结果累加)：</li>
<li>复数乘法运算</li>
</ul>
</li>
</ul>
<h1 id="bram-block-ram">BRAM (Block RAM)</h1>
<ul>
<li>块RAM (根据地址写入和输出)</li>
<li>Block RAM (BRAM)在FPGA设计中扮演着一个重要的角色即数据存储或缓存</li>
<li>zynq中每个BRAM达到了 36Kb,由两个18Kb BRAM拼接而成.</li>
<li>BRAM在不牺牲很大带宽的前提下，提供了更大的储存密度。带宽的牺牲主要在于<strong>每个周期BRAM只有1-2个入口可以被接通</strong>(对应单端口和双端口)。</li>
<li>利用BRAM实现逻辑运算功能本质上而言是将BRAM配置为ROM,它就像一个大的 查找表（LUT）。</li>
<li>对一些固定的数据进行存储，这就需要用到 ROM，可存在BRAM里。</li>
</ul>
<h1 id="单端口ram-伪双端口ram双端口ram和fifo"><a href="https://zhuanlan.zhihu.com/p/96616326">单端口RAM、伪双端口RAM，双端口RAM和FIFO</a></h1>
<ul>
<li>单端口RAM（Single-Port RAM）
<ul>
<li>输入只有<strong>一组数据线</strong>和<strong>一组地址线</strong></li>
<li>只有一个时钟</li>
<li><strong>读写共用地址线</strong></li>
<li>所以一个时钟周期只能读或者只能写。</li>
</ul>
</li>
<li>伪双端口RAM（Simple Dual-Port RAM）
<ul>
<li>输入有<strong>一组数据线</strong>，<strong>两组地址线</strong>。</li>
<li><strong>两个时钟</strong>。</li>
<li>一个端口只读，另一个端口只写，但写入和读取的时钟可以不同，且位宽比可以不是1:1</li>
</ul>
</li>
<li>双端口RAM（True Dual-Port RAM）
<ul>
<li>输入有<strong>两组地址线</strong>和<strong>两组数据线</strong></li>
<li><strong>两个时钟</strong></li>
<li>两个端口都有读写的功能。</li>
</ul>
</li>
<li>FIFO (First-in, first-out)
<ul>
<li>一个端口只读，另一个端口只写。</li>
<li><strong>先入先出，没有地址线</strong></li>
<li>上述三种RAM都可以寻址，<strong>FIFO不能寻址</strong>。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zynq 中查看用HLS 生成的IP核端口对应的内存空间]]></title>
        <id>https://Busy-Bob.github.io/post/zynq-zhong-cha-kan-yong-hls-sheng-cheng-de-ip-he-duan-kou-dui-ying-de-nei-cun-kong-jian/</id>
        <link href="https://Busy-Bob.github.io/post/zynq-zhong-cha-kan-yong-hls-sheng-cheng-de-ip-he-duan-kou-dui-ying-de-nei-cun-kong-jian/">
        </link>
        <updated>2021-01-07T09:34:33.000Z</updated>
        <summary type="html"><![CDATA[<p>找了一会儿才找到, 所以记录下来。</p>
]]></summary>
        <content type="html"><![CDATA[<p>找了一会儿才找到, 所以记录下来。</p>
<!-- more -->
<p>用HLS生成的ip核，使用axi-lite协议，找不到pynq中top函数变量对应的内存空间地址。</p>
<ul>
<li>
<p>HLS中，Synthesis Summary的最后一项可以看到HW info.<br>
<img src="https://Busy-Bob.github.io/post-images/1610107689191.png" alt="" loading="lazy"></p>
</li>
<li>
<p>HLS生成的verilog文件(XXXXX_control_s_axi.v)中，有接口地址信息的注释。</p>
</li>
</ul>
<pre><code>//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Data signal of a
//        bit 31~0 - a[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of b
//        bit 31~0 - b[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of c
//        bit 31~0 - c[31:0] (Read)
// 0x24 : Control signal of c
//        bit 0  - c_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)
</code></pre>
<ul>
<li>pynq中，可通过<code>register_map</code>直接查看地址，或者直接操作变量。</li>
</ul>
<pre><code class="language-python">from pynq import Overlay
overlay = Overlay('./design_1.bit')
add_ip = overlay.add_0

add_ip.register_map.a = 3
add_ip.register_map.b = 4
c = add_ip.register_map.c
c.address
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vitis HLS Coding Styles]]></title>
        <id>https://Busy-Bob.github.io/post/vitis-hls-coding-styles/</id>
        <link href="https://Busy-Bob.github.io/post/vitis-hls-coding-styles/">
        </link>
        <updated>2021-01-04T08:57:57.000Z</updated>
        <summary type="html"><![CDATA[<p>参考Xilinx文档，<a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/vitis_hls_coding_styles.html">Vitis HLS Coding Styles</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>参考Xilinx文档，<a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/vitis_hls_coding_styles.html">Vitis HLS Coding Styles</a></p>
<!-- more -->
<h1 id="不支持的cc部分">不支持的C/C++部分</h1>
<h2 id="系统调用">系统调用</h2>
<ul>
<li><code>printf()</code>， <code>fprintf(stdout,)</code>等不会影响算法执行的系统调用——忽略掉。</li>
<li><code>getc()</code>, <code>time()</code>, <code>sleep()</code> 等系统调用——不被接受。</li>
<li>可以使用<code>__SYNTHESIS__</code>宏来区分<strong>综合</strong>与<strong>调试</strong>过程</li>
</ul>
<pre><code class="language-c">void hier_func4(din_t A, din_t B, dout_t *C, dout_t *D)
{
    dint_t apb, amb;

    sumsub_func(&amp;A, &amp;B, &amp;apb, &amp;amb);
#ifndef __SYNTHESIS__
    FILE *fp1; // The following code is ignored for synthesis
    char filename[255];
    sprintf(filename, Out_apb_ % 03d.dat, apb);
    fp1 = fopen(filename, w);
    fprintf(fp1, % d \n, apb);
    fclose(fp1);
#endif
    shift_func(&amp;apb, &amp;amb, C, D);
}

</code></pre>
<h2 id="动态内存">动态内存</h2>
<ul>
<li><code>malloc()</code>， <code>new</code> 等动态分配内存的不行, 不能在堆上分配内存，必须在栈上。（因为该HLS技术是静态分析）</li>
<li>一种改动方法是直接对栈上变量取指针：</li>
</ul>
<pre><code class="language-C">#include &quot;malloc_removed.h&quot;
#include &lt;stdlib.h&gt;
//#define NO_SYNTH

dout_t malloc_removed(din_t din[N], dsel_t width) {  

#ifdef NO_SYNTH
 long long *out_accum = malloc (sizeof(long long));
 int* array_local = malloc (64 * sizeof(int));
#else
 long long _out_accum;
 long long *out_accum = &amp;_out_accum;
 int _array_local[64];
 int* array_local = &amp;_array_local[0];
#endif
// 中间计算省略
 return *out_accum;
}
</code></pre>
<h2 id="指针的一些限制">指针的一些限制</h2>
<h3 id="通用指针类型转换">通用指针类型转换</h3>
<p>HLS 只支持C/C++原生类型的转换</p>
<h3 id="指针数组">指针数组</h3>
<p>如果每个指针指向一个标量或一个标量数组，则Vitis HLS支持指针数组的综合。但指针数组不能指向额外的指针（应该类似二维数组的行、列指针）</p>
<h3 id="函数指针">函数指针</h3>
<p>不支持</p>
<h2 id="递归函数">递归函数</h2>
<ul>
<li>不支持。不管最后递归次数是不是有限的。</li>
<li>可以使用C++模板来构造<strong>可以用来综合的尾递归</strong>，因为C++中支持非类型模板参数（Nontype Template Parameters），类似Rust中的const泛型，这儿的模板参数为<code>data_t</code>类型的一个值 N。<a href="https://github.com/Xilinx/HLS-Tiny-Tutorials/tree/master/algorithm_template_fir_filter">例子如下</a>：</li>
</ul>
<pre><code class="language-C++">// Tail recursive call
template&lt;data_t N&gt; 
	struct fibon_s {
    template&lt;typename T&gt;
    static T fibon_f(T a, T b) {
		return fibon_s&lt;N-1&gt;::fibon_f(b, (a+b));
  }
};

// Termination condition
template&lt;&gt; struct fibon_s&lt;1&gt; {
  template&lt;typename T&gt;
  static T fibon_f(T a, T b) {
    return b;
  }
};

void cpp_template(data_t a, data_t b, data_t &amp;dout){
  dout = fibon_s&lt;FIB_N&gt;::fibon_f(a,b);
}
</code></pre>
<h2 id="stl">STL</h2>
<p>有动态内存和递归，不能使用。</p>
<h1 id="函数">函数</h1>
<p>顶层函数不能是静态的。</p>
<h2 id="内联函数">内联函数</h2>
<ul>
<li>综合时候花费时间、内存较多，但效果更好。</li>
<li>没有独立的RTL文件和报告了。</li>
</ul>
<h2 id="代码风格的影响">代码风格的影响</h2>
<ul>
<li>影响函数参数和接口</li>
<li>直接用函数接口的输入量来驱动变量时候，程序就不会使用某些优化手段。（如输入量是循环索引的上限）</li>
</ul>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;

ap_int&lt;24&gt; foo(int x, int y) {  
 int tmp;

 tmp = (x * y);
 return tmp
} 
</code></pre>
<p>上述代码这会导致一个32-bit乘法器，输出再被截取。<br>
下面这个代码直接产生一个24-bit乘法器。</p>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;
typedef ap_int&lt;12&gt; din_t;
typedef ap_int&lt;24&gt; dout_t;

dout_t func_sized(din_t x, din_t y) {  
 int tmp;

 tmp = (x * y);
 return tmp
}
</code></pre>
<h2 id="cc内置函数">C/C++内置函数</h2>
<ul>
<li>只支持以下两个</li>
<li><code>__builtin_clz(unsigned int x)</code>: Returns the number of leading 0-bits in x, starting at the most significant bit position. If x is 0, the result is undefined.</li>
<li><code>__builtin_ctz(unsigned int x)</code>: Returns the number of trailing 0-bits in x, starting at the least significant bit position. If x is 0, the result is undefined.</li>
</ul>
<h1 id="循环">循环</h1>
<ul>
<li>支持得很好。可以切流水线，展开、部分展开、合并和扁平化</li>
<li><strong>不要使用全局变量作为循环变量</strong>，否则会阻碍代码优化</li>
</ul>
<h2 id="循环变量范围">循环变量范围</h2>
<ul>
<li>循环变量的上限如果是变量，就难以在综合时候优化。</li>
<li>循环变量的上限如果是变量，循环的latency无法确定。</li>
<li>循环变量的上限如果是变量，设计的性能未知。</li>
</ul>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;
#define N 32

typedef ap_int&lt;8&gt; din_t;
typedef ap_int&lt;13&gt; dout_t;
typedef ap_uint&lt;5&gt; dsel_t;

dout_t code028(din_t A[N], dsel_t width) {  

 dout_t out_accum=0;
 dsel_t x;

 LOOP_X:for (x=0;x&lt;width; x++) {
 out_accum += A[x];
 }

 return out_accum;
}
</code></pre>
<p>为了克服无法分析性能的缺点，一般是加上<br>
<code>#pragma HLS loop_tripcount min=&lt;int&gt; max=&lt;int&gt; avg=&lt;int&gt;</code><br>
或者是使用断言<code>assert</code></p>
<pre><code class="language-C++">void foo (num_samples, ...) {
  int i;
  ...
  loop_1: for(i=0;i&lt; num_samples;i++) {
   #pragma HLS loop_tripcount min=12 max=16
   ...
    result = a + b;
  }
}
</code></pre>
<p><strong>注意</strong>：该编译选项只用于分析，不会用于综合。</p>
<ul>
<li><strong>对于具有可变边界的循环的解决方案是：在循环中有条件地执行，并且令循环迭代的次数为固定值。</strong></li>
</ul>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;
#define N 32

typedef ap_int&lt;8&gt; din_t;
typedef ap_int&lt;13&gt; dout_t;
typedef ap_uint&lt;5&gt; dsel_t;

dout_t loop_max_bounds(din_t A[N], dsel_t width) {  

 dout_t out_accum=0;
 dsel_t x;

 LOOP_X:for (x=0; x&lt;N; x++) {
 if (x&lt;width) {
  out_accum += A[x];
 }
 }

 return out_accum;
}
</code></pre>
<h2 id="将循环流水线化">将循环流水线化</h2>
<p>通常通过流水线最内层的循环来找到面积和性能之间的最佳平衡。</p>
<pre><code class="language-C++">#include &quot;loop_pipeline.h&quot;

dout_t loop_pipeline(din_t A[N]) {  

 int i,j;
 static dout_t acc;

 LOOP_I:for(i=0; i &lt; 20; i++){
 LOOP_J: for(j=0; j &lt; 20; j++){
 acc += A[i] * j;
 }
 }

 return acc;
}
</code></pre>
<ul>
<li>
<p>Pipeline <code>LOOP_J</code></p>
<ul>
<li>只需调度一个乘法器操作和一个数组访问</li>
<li>Latency is approximately 400 cycles (20x20) and requires less than 100 LUTs and registers (the I/O control and FSM are always present).</li>
</ul>
</li>
<li>
<p>Pipeline <code>LOOP_I</code></p>
<ul>
<li>内部循环展开20次。</li>
<li>需调度20个乘法器操作和20个数组访问</li>
<li>Latency is approximately 20 cycles but requires a few hundred LUTs and registers. About 20 times the logic as first option, minus any logic optimizations that can be made.</li>
</ul>
</li>
<li>
<p>Pipeline <code>function loop_pipeline</code></p>
<ul>
<li>需调度400个乘法器操作和400个数组访问</li>
<li>Latency is approximately 10 (20 dual-port accesses) but requires thousands of LUTs and registers (about 400 times the logic of the first option minus any optimizations that can be made)</li>
</ul>
</li>
</ul>
<h3 id="不完美的循环嵌套">不完美的循环嵌套</h3>
<p>不完美的循环嵌套，或者无法将循环嵌套展开，会导致进入和退出循环的额外时钟周期。</p>
<h2 id="循环并行">循环并行</h2>
<ul>
<li>HLS会使得逻辑和函数并行，但是并不会调度循环来并行。</li>
<li>例子中SUM_X和SUM_Y不会并行调度，而是顺序的。（因为两个循环变量有不同的上限）</li>
</ul>
<pre><code class="language-C++">#include &quot;loop_sequential.h&quot;

void loop_sequential(din_t A[N], din_t B[N], dout_t X[N], dout_t Y[N], 
 dsel_t xlimit, dsel_t ylimit) {  

 dout_t X_accum=0;
 dout_t Y_accum=0;
 int i,j;

 SUM_X:for (i=0;i&lt;xlimit; i++) {
 X_accum += A[i];
 X[i] = X_accum;
}

 SUM_Y:for (i=0;i&lt;ylimit; i++) {
 Y_accum += B[i];
 Y[i] = Y_accum;
 }
} 
</code></pre>
<p>把两个循环装在function里面就可以并行了</p>
<pre><code class="language-C++">#include &quot;loop_functions.h&quot;

void sub_func(din_t I[N], dout_t O[N], dsel_t limit) {
 int i;
 dout_t accum=0;
  
 SUM:for (i=0;i&lt;limit; i++) {
 accum += I[i];
 O[i] = accum;
 }

}

void loop_functions(din_t A[N], din_t B[N], dout_t X[N], dout_t Y[N], 
 dsel_t xlimit, dsel_t ylimit) {

 sub_func(A,X,xlimit);
 sub_func(B,Y,ylimit);
}
</code></pre>
<ul>
<li>这是在函数中捕获循环以利用并行性的原则</li>
</ul>
<h2 id="循环依赖">循环依赖</h2>
<ul>
<li>一次循环开始可能会依赖上一次循环的结束。</li>
</ul>
<pre><code class="language-C++"> Minim_Loop: while (a != b) { 
 if (a &gt; b) 
 a -= b; 
 else 
 b -= a;
 }
</code></pre>
<ul>
<li>解决方案是<strong>尽量确保初始操作尽早执行</strong>(应该就是对循环变量做修改等)</li>
</ul>
<h2 id="在c类中不会展开循环">在c++类中不会展开循环</h2>
<ul>
<li>应小心确保循环归纳变量不是类的数据成员，因为这会防止循环被展开。</li>
</ul>
<pre><code class="language-C++">template &lt;typename T0, typename T1, typename T2, typename T3, int N&gt;
class foo_class
{
private:
    pe_mac&lt;T0, T1, T2&gt; mac;

public:
    T0 areg;
    T0 breg;
    T2 mreg;
    T1 preg;
    T0 shift[N];
    int k; // Class Member
    T0 shift_output;
    void exec(T1 *pcout, T0 *dataOut, T1 pcin, T3 coeff, T0 data, int col)
    {
    Function_label0:;
#pragma HLS inline off
    SRL:
        for (k = N - 1; k &gt;= 0; --k)
        {
#pragma HLS unroll // Loop will fail UNROLL
            if (k &gt; 0)
                shift[k] = shift[k - 1];
            else
                shift[k] = data;
        }

        *dataOut = shift_output;
        shift_output = shift[N - 1];
    }

    *pcout = mac.exec1(shift[4 * col], coeff, pcin);
};
</code></pre>
<h1 id="数组">数组</h1>
<ul>
<li>仿真时候内存不够怎么办？一个妥协的方法是动态内存。</li>
<li>定点数占用内存 &gt;  arbitrary precision type &gt; C自带类型</li>
</ul>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;
  
  int i, acc; 
#ifdef __SYNTHESIS__
  // Use an arbitrary precision type &amp; array for synthesis
  ap_int&lt;32&gt;  la0[10000000], la1[10000000]; 
#else 
  // Use an arbitrary precision type &amp; dynamic memory for simulation
 ap_int&lt;int32&gt; *la0 = malloc(10000000  * sizeof(ap_int&lt;32&gt;));
 ap_int&lt;int32&gt; *la1 = malloc(10000000  * sizeof(ap_int&lt;32&gt;));
#endif
  for (i=0 ; i &lt; 10000000; i++) { 
      acc = acc + la0[i] + la1[i]; 
  } 
</code></pre>
<ul>
<li><strong>数组长度小于1024</strong>：实例化为FIFO</li>
<li><strong>数组长度大于1024</strong>： 保存在block RAM或LUTRAM或UltraRAM</li>
</ul>
<h2 id="数组访问和性能">数组访问和性能</h2>
<ul>
<li>对数组访问次数越多，越会限制性能。（尤其是在一个循环中的情况）</li>
<li>所以有如下的更改策略：</li>
</ul>
<pre><code class="language-C++">#include &quot;array_mem_bottleneck.h&quot;
 
dout_t array_mem_bottleneck(din_t mem[N]) {  

 dout_t sum=0;
 int i;

 SUM_LOOP:for(i=2;i&lt;N;++i)
   sum += mem[i] + mem[i-1] + mem[i-2];
    
 return sum;
}
</code></pre>
<p>变成</p>
<pre><code class="language-C++">#include &quot;array_mem_perform.h&quot;
 
dout_t array_mem_perform(din_t mem[N]) {  

 din_t tmp0, tmp1, tmp2;
 dout_t sum=0;
 int i;

 tmp0 = mem[0];
 tmp1 = mem[1];
 SUM_LOOP:for (i = 2; i &lt; N; i++) { 
 tmp2 = mem[i];
 sum += tmp2 + tmp1 + tmp0;
 tmp0 = tmp1;
 tmp1 = tmp2;
 } 
    
 return sum;
}
</code></pre>
<h3 id="fifo访问">FIFO访问</h3>
<p>因为是先入先出，所以必须要从0开始顺序访问。</p>
<h2 id="接口上的数组top函数参数">接口上的数组（top函数参数）</h2>
<p>HLS会默认会将接口上数组认为是内存。HLS有两种假设的实现方式</p>
<ul>
<li><strong>off-chip的内存</strong>：</li>
<li><strong>标准的block RAM，延迟只有1clock</strong>： 数据会在地址给定后一个周期准备好。</li>
</ul>
<p>所以需要：</p>
<ul>
<li>指定是RAM还是FIFO的接口</li>
<li>指定RAM是单端口还是双端口的RAM，预编译选项中的<code>storage_type</code>，语法是<a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/hls_pragmas.html#jit1504034365862__ad411155">#pragma HLS interface</a></li>
<li>指定RAM延时， <code>latency</code></li>
<li>ARRAY_PARTITION, ARRAY_RESHAPE 两个优化输入的命令。语法是<a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/hls_pragmas.html?#ariaid-title4">#pragma HLS array_partition</a>， 相当于<strong>用寄存器代替RAM</strong>，或者用更小的RAM来代替大的RAM。</li>
</ul>
<p><strong>默认情况下</strong>：</p>
<ul>
<li>默认是单端口的RAM。</li>
<li>如果initiation interval or latency可以被减少，则使用双端口的RAM</li>
</ul>
<h2 id="数组初始化">数组初始化</h2>
<ul>
<li>建议使用<code>static</code>关键字来建立数组，保证HLS将其变成内存。</li>
<li>确保初始化大内存不会造成操作开销。不用static会在初始化时候，写入这些值，有一定时间开销。</li>
</ul>
<h3 id="实例化一个rom">实例化一个ROM</h3>
<ul>
<li>建议使用<code>const</code>来做一个只读的ROM，如果不加，也没有问题。综合过程自己会进行优化。</li>
</ul>
<h1 id="数据类型">数据类型</h1>
<h2 id="cc-类型">C/C++ 类型</h2>
<p>略</p>
<h2 id="arbitrary-precision-ap-data-types-任意精度数据类型">Arbitrary Precision (AP) Data Types 任意精度数据类型</h2>
<ul>
<li><strong>C语言可以这样写</strong></li>
</ul>
<pre><code class="language-C++">#include &quot;types.h&quot;

typedef int6 dinA_t;
typedef int12 dinB_t;
typedef int22 dinC_t;
typedef int33 dinD_t;
typedef int18 dout1_t;
typedef uint13 dout2_t;
typedef int22 dout3_t;
typedef int6 dout4_t;
</code></pre>
<ul>
<li><strong>C++模版这样写</strong>，还有一个好处是可以定义超大的数</li>
</ul>
<pre><code class="language-C++">#include &quot;ap_int.h&quot;
void foo_top (…) {
  
 ap_int&lt;9&gt;  var1;           // 9-bit
 ap_uint&lt;10&gt;  var2;         // 10-bit unsigned
</code></pre>
<h3 id="定点数-arbitrary-precision-fixed-point-data-types">定点数 Arbitrary Precision Fixed-Point Data Types</h3>
<pre><code class="language-C++">#include &lt;ap_fixed.h&gt;
...
ap_fixed&lt;18,6,AP_RND &gt; my_type;
...
ap_fixed&lt;2, 0&gt; a = -0.5;    // a can be -0.5,
ap_ufixed&lt;1, 0&gt; x = 0.5;    // 1-bit representation. x can be 0 or 0.5
ap_ufixed&lt;1, -1&gt; y = 0.25;  // 1-bit representation. y can be 0 or 0.25
const ap_fixed&lt;1, -7&gt; z = 1.0/256;  // 1-bit representation for z = 2^-8
</code></pre>
<p>四个泛型参数分别为，见<a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/use_arbitrary_precision_data_type.html#guo1585572335601">Fixed-Point Identifier Summary</a>：</p>
<ul>
<li>总长度</li>
<li>整数位数（可以为负数，见例子）</li>
<li>量化模式</li>
<li>溢出饱和位数量</li>
</ul>
<h2 id="复合数据类型">复合数据类型</h2>
<h3 id="struct"><code>struct</code></h3>
<ul>
<li>默认成员是分解的。<strong>结构体的数组实现为多个数组</strong>，结构体的每个成员都有一个单独的数组。</li>
<li>利用pragma指令控制是否分解。</li>
</ul>
<h3 id="enum"><code>enum</code></h3>
<p>略</p>
<h3 id="unions"><code>unions</code></h3>
<ul>
<li>HLS综合并不保证使用相同的内存或者寄存器</li>
</ul>
<h3 id="类型限定符">类型限定符</h3>
<ul>
<li><code>volatile</code>：
<ul>
<li>综合不会进行优化</li>
<li>Arbitrary precision types do not support the volatile qualifier（计算时候）</li>
</ul>
</li>
<li><code>static</code>：
<ul>
<li>RTL等价是寄存器、触发器和内存。</li>
<li>config_rtl 需要配置，不然默认复位不会初始化。</li>
</ul>
</li>
<li><code>const</code>：
<ul>
<li>常量或者ROM</li>
</ul>
</li>
</ul>
<h2 id="全局变量">全局变量</h2>
<p>自由使用，但是只存在该ip核内部。</p>
<h2 id="指针">指针</h2>
<p>可以综合，但尽量避免使用。尤其是以下情况：</p>
<ul>
<li>同一个函数中，一个指针被读写多次</li>
<li>指针类型转换仅限C/C++标准类型</li>
</ul>
<h3 id="接口处使用指针top函数的参数中">接口处使用指针（top函数的参数中）</h3>
<ul>
<li>基本指针：
<ul>
<li>指针可以合成为一个简单的<strong>线接口</strong>或使用握手的接口协议。</li>
<li>要合成一个FIFO接口，指针必须是只读或只写的。</li>
</ul>
</li>
<li>指针运算：
<ul>
<li>不能实现，不能实现无序访问。</li>
<li>需要变成数组，用RAM实现。</li>
</ul>
</li>
<li>流数据
<ul>
<li>C++ 编译器可能会优化指针的访问，所以需要加volatile。</li>
</ul>
</li>
</ul>
<pre><code class="language-C++">#include &quot;pointer_stream_good.h&quot;

void pointer_stream_good ( volatile dout_t *d_o,  volatile din_t *d_i) {
 din_t acc = 0;

 acc += *d_i;
 acc += *(d_i+1);
 *d_o = acc;
 acc += *(d_i+2);
 acc += *(d_i+3);
 *(d_o+1) = acc;
} 
</code></pre>
<h2 id="vector类型">Vector类型</h2>
<h3 id="hls的vector类型是为了simd操作">HLS的Vector类型是为了SIMD操作</h3>
<ul>
<li>single-instruction multiple-data (SIMD)： 单指令，多数据。</li>
<li>Vitis HLS提供的一个模版类型<code>hls::vector&lt;T, N&gt;</code>: 一个有N个T类型的元素，T必须重载了数学运算。</li>
<li>最佳性能是在<strong>T的位宽</strong>和<strong>N的值</strong>均为2的幂时。</li>
<li>在<code>hls::vector</code>上的运算操作都会被并行化，所以矩阵运算一般使用这个。</li>
</ul>
<pre><code class="language-C++">#include &lt;hls_vector.h&gt;
hls::vector&lt;T,N&gt;  aVec;
</code></pre>
<h3 id="vector-内存布局">Vector 内存布局</h3>
<ul>
<li>Vctor储存是对齐到2的n次方的。所以性能最好的时候是大小和位宽都为2的幂的时候。</li>
<li>实现方式如下：</li>
</ul>
<pre><code class="language-C++">constexpr size_t gp2(size_t N)
{
    return (N &gt; 0 &amp;&amp; N % 2 == 0) ? 2 * gp2(N / 2) : 1;
}
 
template&lt;typename T, size_t N&gt; class alignas(gp2(sizeof(T) * N)) vector
{
    std::array&lt;T, N&gt; data;
};
</code></pre>
<h1 id="c类和模版">C++类和模版</h1>
<ul>
<li>类是完全支持的。</li>
<li>不建议在类中使用全局变量，会阻碍优化</li>
<li>模版是支持的。但不能作为顶层函数。</li>
</ul>
<h1 id="断言">断言</h1>
<ul>
<li>断言可以用在综合中，提供范围的信息。如循环上限等。（不像tripcount 只能用于分析）</li>
</ul>
<h1 id="高性能hls">高性能HLS</h1>
<ul>
<li>是最大程度地减少对顶层函数参数的访问。</li>
<li>在阵列中设置默认值会花费时钟周期和性能。</li>
<li>多次读取和重新读取数据会消耗时钟周期和性能。</li>
<li>以任意或随机访问方式访问数据要求将数据存储在本地数组中，浪费资源。</li>
</ul>
<h2 id="确保数据的连续流和数据重用">确保数据的连续流和数据重用</h2>
<ul>
<li>将数据从CPU或系统内存传输到FPGA，则通常会以<strong>流传输方式</strong>进行传输。从FPGA传输回系统的数据也应以这种方式执行。</li>
<li><code>hls::stream</code> , 顺序访问，表现为一个无限深度的FIFO。</li>
<li>在CPU体系结构中，通常避免有条件或分支操作。当程序需要分支时，它将丢失存储在CPU提取管线中的所有指令。<strong>在FPGA体系结构中，每个条件分支的硬件中已经存在一条单独的路径，并且不会与流水线任务内部的分支相关的性能下降。这只是选择要使用哪个分支的一种情况。</strong></li>
<li><a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/hls_pragmas.html">HLS Pragmas</a>的使用。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vitis HLS 的Tiny Tutorial部分代码分析]]></title>
        <id>https://Busy-Bob.github.io/post/vitis-hls-de-tiny-tutorial-bu-fen-dai-ma-fen-xi/</id>
        <link href="https://Busy-Bob.github.io/post/vitis-hls-de-tiny-tutorial-bu-fen-dai-ma-fen-xi/">
        </link>
        <updated>2021-01-04T06:15:07.000Z</updated>
        <summary type="html"><![CDATA[<p>对例子中的语法等的一点记录</p>
]]></summary>
        <content type="html"><![CDATA[<p>对例子中的语法等的一点记录</p>
<!-- more -->
<h1 id="背景介绍">背景介绍</h1>
<ul>
<li><strong>HLS</strong> (high-level synthesis)： 高级综合, 用 C/C++为FPGA开发 RTL IP.</li>
<li><strong>Vitis HLS</strong>:  在Vivado 2020版本中替代原先的Vivado HLS, 功能略有差异，在Vivado HLS中的例子直接在Vitis HLS上跑会报错。详细比较见<a href="https://cloud.tencent.com/developer/article/1745199">Vivado HLS和Vitis HLS什么区别？</a></li>
<li><strong>HLS中的pragma语法</strong>: <a href="https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/hls_pragmas.html">HLS Pragmas</a></li>
</ul>
<h1 id="内容">内容</h1>
<ul>
<li><code>#pragma HLS dataflow</code>
<ul>
<li>默认情况下，Vitis HLS工具试图最小化延迟并提高并发性。但是，数据依赖性可能会限制这一点。DATAFLOW优化使<strong>函数或循环中的操作能够在上一个函数或循环完成其所有操作之前开始操作</strong>。（能够分析更细）。</li>
<li>也能够解决两个不依赖循环不并行情况（类似于封装进函数）。</li>
</ul>
</li>
</ul>
<pre><code class="language-C++">void diamond(data_t vecIn[N], data_t vecOut[N])
{
  data_t c1[N], c2[N], c3[N], c4[N];
#pragma HLS dataflow
  funcA(vecIn, c1, c2);
  funcB(c1, c3);
  funcC(c2, c4);
  funcD(c3, c4, vecOut);
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Busy-Bob.github.io/post-images/1609835551513.png" alt="" loading="lazy"></figure>
<ul>
<li><code>#pragma HLS pipeline rewind</code>
<ul>
<li>构造一个连续循环的流水线。两次循环之间没有暂停。</li>
<li>不能包含条件分支 (if-else)</li>
<li>只支持循环，不支持函数的流水线化。</li>
</ul>
</li>
</ul>
<pre><code class="language-C++">  for (int i = 0; i &lt; N; i++)
  {
#pragma HLS pipeline rewind
#pragma HLS unroll factor = 2
    data_t t = in[i] * 3;
    out1[i] = t;
    out2[i] = t;
  }
</code></pre>
<ul>
<li><code>#pragma HLS unroll factor = 2</code>
<ul>
<li>将循环展开多少次</li>
</ul>
</li>
</ul>
<pre><code class="language-C++">for(int i = 0; i &lt; X; i++) {
  pragma HLS unroll factor=2
  a[i] = b[i] + c[i];
}
</code></pre>
<p>变成：</p>
<pre><code class="language-C++">for(int i = 0; i &lt; X; i += 2) {
  a[i] = b[i] + c[i];
  if (i+1 &gt;= X) break;
  a[i+1] = b[i+1] + c[i+1];
}
</code></pre>
<ul>
<li><code>#pragma HLS function_instantiate variable=&lt;variable&gt;</code>
<ul>
<li>FUNCTION_INSTANTIATE编译指示用于为函数的每个实例创建唯一的RTL实现，从而可以根据函数调用对每个实例进行本地优化。因为：调用函数时，<strong>函数的某些输入可以是恒定值</strong>，并使用它来简化周围的控制结构并<strong>生成更小的</strong>，<strong>更优化的功能块</strong>。</li>
<li><code>variable</code>是必需的参数，用于定义要用作常量的函数参数。</li>
</ul>
</li>
</ul>
<pre><code class="language-C++">char foo(char inval, char incr) {
#pragma HLS INLINE OFF
#pragma HLS FUNCTION_INSTANTIATE variable=incr
 return inval + incr;
}

void top(char inval1, char inval2, char inval3,
 char *outval1, char *outval2, char *outval3)
{
 *outval1 = foo(inval1,   0);
 *outval2 = foo(inval2,   1);
 *outval3 = foo(inval3, 100);
}
</code></pre>
<ul>
<li><strong>不完美的循环(imperfect loop)</strong>:
<ul>
<li>内层循环上限是一个变量。</li>
<li>循环体并非全部在最里层循环中。</li>
<li>所以<strong>没法展开</strong>，会造成额外的进出循环的时钟周期。</li>
</ul>
</li>
</ul>
<pre><code class="language-C++">    LOOP_I:for(i=0; i &lt; 20; i++){
        acc = 0;
        LOOP_J: for(j=0; j &lt; 20; j++){
            acc += A[j] * j;
        }
        if (i%2 == 0)
            B[i] = acc / 20;
        else
            B[i] = 0;
    }
</code></pre>
<ul>
<li>将不完美循环改写成完美循环的trick：<strong>使用条件语句</strong>。</li>
</ul>
<pre><code class="language-C++">    LOOP_I:for(i=0; i &lt; 20; i++){
        LOOP_J: for(j=0; j &lt; 20; j++){
            if(j==0) acc = 0;
            acc += A[j] * j;
            if(j==19) {
                if (i%2 == 0)
                    B[i] = acc / 20;
                else
                    B[i] = 0;
            }
        }
    }
</code></pre>
<ul>
<li>
<p>循环可以没有label，HLS会生成默认label。</p>
</li>
<li>
<p>循环上限为变量的优化方法： <strong>使用条件语句</strong>。</p>
</li>
</ul>
<pre><code class="language-C++">  LOOP_X:for (x=0;x&lt;N-1; x++) {
    if (x&lt;width) {
      out_accum += A[x];
    }
  }
</code></pre>
<ul>
<li>可以利用两个独立的模块来压缩流水的II （用模版实现较为方便，需要配合上多路选择器）</li>
</ul>
<pre><code class="language-C++">//                    +--proc--&gt;[ II=2 ]--+
//                   /                     \               
// in --&gt;[demux II=1]                       [mux II=1]---&gt; out
//                   \                     /
//                    +--proc--&gt;[ II=2 ]--+

#include &quot;example.h&quot;

//--------------------------------------------
template &lt;int ID&gt;
void proc(stream&lt;int&gt; &amp;in, stream&lt;int&gt; &amp;out)
{
    for (int i = 0; i &lt; 25; i++)
    {
#pragma HLS PIPELINE II=2
#pragma HLS LATENCY min=2 max=2
        int var;
        in.read(var);
        out.write(var);
    }
}

//--------------------------------------------
void mux(stream&lt;int&gt; (&amp;inter)[2], stream&lt;int&gt; &amp;mux_output)
{
    int mux_sel = 0;
    for (int i = 0; i &lt; 50; i++)
    {
#pragma HLS PIPELINE II=1
        int var;
        inter[mux_sel].read(var);
        mux_output.write(var);
        mux_sel = (mux_sel == 0) ? (1) : (0);
    }
}

//--------------------------------------------
void demux(stream&lt;int&gt; &amp;in, stream&lt;int&gt; (&amp;inter)[2])
{
    int demux_sel = 0;
    for (int i = 0; i &lt; 50; i++)
    {
#pragma HLS PIPELINE II=1

        int var;
        in.read(var);
        inter[demux_sel].write(var);
        demux_sel = (demux_sel == 0) ? 1 : 0;
    }
}

void example(stream&lt;int&gt; &amp;in, stream&lt;int&gt; &amp;out)
{
#pragma HLS DATAFLOW

    stream&lt;int&gt; inter[2];
    stream&lt;int&gt; mux_in[2];

#pragma HLS STREAM variable = inter depth = 16
#pragma HLS STREAM variable = mux_in depth = 16

    demux(in, inter);
    proc&lt;0&gt;(inter[0], mux_in[0]);
    proc&lt;1&gt;(inter[1], mux_in[1]);
    mux(mux_in, out);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[👨👩💏五周年啦~🥂🍻]]></title>
        <id>https://Busy-Bob.github.io/post/wu-zhou-nian-la/</id>
        <link href="https://Busy-Bob.github.io/post/wu-zhou-nian-la/">
        </link>
        <updated>2021-01-02T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>2021-1-3： 水吉和臭臭五周年啦！</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609601219382.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>2021-1-3： 水吉和臭臭五周年啦！</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609601219382.jpg" alt="" loading="lazy"></p>
<!-- more -->
<h1 id="2020年的一月那么近又那么远">2020年的一月，那么近又那么远</h1>
<p>2020年跨年这一天，乡村教师吉返回北京，和被无数考试摧残的臭第一次跨年+参加学校的跨年晚会~</p>
<figure data-type="image" tabindex="1"><img src="https://Busy-Bob.github.io/post-images/1609590165354.jpg" alt="" loading="lazy"></figure>
<p><strong>新新廿廿</strong>的2020来啦</p>
<figure data-type="image" tabindex="2"><img src="https://Busy-Bob.github.io/post-images/1609590219882.jpg" alt="" loading="lazy"></figure>
<p>那时的我们还不知道2020会是一团糟🙊🙉🙈</p>
<br>
<p>回新津(恰好错过了途径武汉的火车)，一起去看望了水吉妈妈家的小泰迪~🐶🐶🐶<br>
<img src="https://Busy-Bob.github.io/post-images/1609592085383.jpg" alt="" loading="lazy"></p>
<h1 id="二月三月家里蹲">二月三月家里蹲</h1>
<p>一月末，疫情开始严重起来了。我们就只能骑着小电驴在两个家间穿梭，一三五在臭臭家，二四六在水吉家。就这样开开心心地度过了两个月~(监管最严格的时候甚至只能在超市碰头....)</p>
<p>情人节的礼物是山地玫瑰！<br>
<img src="https://Busy-Bob.github.io/post-images/1609591290870.jpg" alt="" loading="lazy"></p>
<p>还有小相机~ 这样坏记性的水吉就能够记录下更多在一起的美好回忆啦~<br>
<img src="https://Busy-Bob.github.io/post-images/1609592821850.jpg" alt="" loading="lazy"></p>
<p>当然还有：</p>
<ul>
<li><strong>在家里一起吃火锅</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609593178211.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>一起穿睡衣一起刷剧一起比心</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609593229660.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>一起泡jio</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609593307478.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>一起尬舞，第一次也是唯一的一次两个人同时MEGASTAR</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609594381621.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>一起玩耍</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609593946953.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>一起做饭</strong><br>
都被吃掉了，没有图了😂<br>
<br></li>
</ul>
<h1 id="四月五月深圳happy">四月五月深圳happy</h1>
<p>四月五月，水吉的哥哥让水吉去深圳帮忙，我也一并去蹭吃蹭喝:)🍎🍖🍗🍤🍨🍡🍜</p>
<ul>
<li><strong>吃</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595003396.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>吃</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595010299.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>做饭，然后吃</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595046890.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>再做饭，然后吃</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595058832.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>最后在办公室插满了水吉喜欢的花花~</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595105586.jpg" alt="" loading="lazy"><br>
<br></li>
</ul>
<h1 id="六月七月是分开的两个月">六月七月是分开的两个月</h1>
<p>疫情控制住了，乡村女教师吉吉水结束了网上上课，又回到了山西，成为了落水河最强的地理老师！</p>
<ul>
<li><strong>唯一的约会地点是召唤师峡谷</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595665922.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>水吉给家里买了一堆肉肉~</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595729442.jpg" alt="" loading="lazy"><br>
<br></li>
</ul>
<h1 id="八月-老司机嘟嘟嘟">八月 老司机嘟嘟嘟</h1>
<p>水吉回来啦！我们也开始学车车！科一我们都考了一样的分数~</p>
<ul>
<li><strong>嘟嘟嘟，开车啦</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609595988555.jpg" alt="" loading="lazy"><br>
<br></li>
<li><strong>也去了广安的猫猫咖啡厅，不过还有人抽烟....</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609596042550.jpg" alt="" loading="lazy"><br>
<br></li>
</ul>
<h1 id="九月-返校吃吃吃">九月 返校吃吃吃</h1>
<p>八月末终于可以返校了，水吉爸爸去西藏玩啦，可怜吉只好住在我家。白天学车做饭，晚上和妈妈一起刷剧，最后惊险通过科二， 而我在学校吃吃吃吃吃吃吃🤤🤤🤤</p>
<ul>
<li>
<p><strong>半年多没有浇水的肉肉们</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609596722960.jpg" alt="" loading="lazy"><br>
水吉送的肉肉们竟然基本还是好好的，除了实验室的那个小个子顶不住了~<br>
<img src="https://Busy-Bob.github.io/post-images/1609596772512.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>和室友返校第一餐</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609596564140.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>返校后和大家吃吃吃</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609596800689.jpg" alt="" loading="lazy"><br>
<img src="https://Busy-Bob.github.io/post-images/1609596808591.jpg" alt="" loading="lazy"><br>
<img src="https://Busy-Bob.github.io/post-images/1609596818858.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>水吉回来啦，去水吉最喜欢的重八~</strong><br>
<img src="https://Busy-Bob.github.io/post-images/1609596866823.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
</ul>
<h1 id="十月-出游-生日和桌游">十月 出游、生日和桌游</h1>
<p>每年十月，都是天高气爽的好日子，非常适合出去玩。</p>
<ul>
<li>
<p><strong>再爬蟒山<s>大爷</s>小弟</strong><br>
今天的十一又去了蟒山，蟒山大爷似乎今年格外的矮小，一会就登顶啦！<br>
<img src="https://Busy-Bob.github.io/post-images/1609597594730.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>去野鸭湖！</strong><br>
担任小学期助教的意外之喜，秋天的野鸭湖真的好漂亮~<br>
<img src="https://Busy-Bob.github.io/post-images/1609597706914.jpg" alt="" loading="lazy"><br>
<br><br>
<img src="https://Busy-Bob.github.io/post-images/1609597713248.jpg" alt="" loading="lazy"><br>
<br><br>
<img src="https://Busy-Bob.github.io/post-images/1609597735946.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>臭臭的生日</strong><br>
这一天，水吉因为有篮球比赛早早离开啦~和大为、sff在宿舍快乐嚯奶茶，开心卡卡颂！<br>
<img src="https://Busy-Bob.github.io/post-images/1609597802417.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>提前送给水吉的生日礼物</strong><br>
今年送给水吉的礼物是一个能够放进书包的itx主机~老夫老妻了，早送早享受💻从此水吉的0-12快乐提莫再也不能找电脑卡的理由了hhhhhhhhh<br>
<img src="https://Busy-Bob.github.io/post-images/1609597946418.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>桌游、桌游！</strong><br>
今年是水吉爱玩的一年，从塞尔达到卡卡颂、卡坦岛，水吉玩个不停！<br>
<img src="https://Busy-Bob.github.io/post-images/1609598264941.jpg" alt="" loading="lazy"><br>
（被迫加入游戏的我）<br>
<br></p>
</li>
</ul>
<h1 id="十一-十二月-吃吃吃和水吉的生日">十一、十二月 吃吃吃和水吉的生日</h1>
<p>今年的冬天格外的冷，所以涮肉要吃起来啊！</p>
<ul>
<li>
<p><strong>听说，初雪和涮肉更配哦</strong><br>
初雪，我们去了四道口最好吃的涮肉，排队到了下午两点.....<br>
<img src="https://Busy-Bob.github.io/post-images/1609598677322.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>繁忙的十二月，我们终于在五道口找了一家咖啡厅</strong><br>
今年因为校园封闭，不能再到校园里面来学习了，经过几番辗转，终于在五道口找到了新的落脚之地，又可以一起学习了。<br>
<img src="https://Busy-Bob.github.io/post-images/1609598757515.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>圣诞——水吉的生日</strong><br>
和水吉以及水吉的室友们一起吃饭唱K，没错我就是K歌之王<sub>(的老公)</sub>。<br>
<img src="https://Busy-Bob.github.io/post-images/1609600194043.jpg" alt="" loading="lazy"><br>
<br></p>
</li>
<li>
<p><strong>再次封校前的最后一次见面</strong><br>
学校又要封闭了，赶在最后一天和水吉见了一面，还吃了小宇哥推荐的好吃串串！（当天因为寒冷变成胆小菇的我↓）<br>
<img src="https://Busy-Bob.github.io/post-images/1609600950737.jpg" alt="" loading="lazy"></p>
</li>
</ul>
<h1 id="2021">2021💑💏</h1>
<p>新的一年，2021🐛🐛🐛啊！</p>
<p>好像没啥好说的了，那 <strong>最后祝大家身体健康!!科研有成!!</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FPGA用来加速运算的调研]]></title>
        <id>https://Busy-Bob.github.io/post/fpga-yong-lai-jia-su-yun-suan-de-diao-yan/</id>
        <link href="https://Busy-Bob.github.io/post/fpga-yong-lai-jia-su-yun-suan-de-diao-yan/">
        </link>
        <updated>2021-01-02T05:53:42.000Z</updated>
        <summary type="html"><![CDATA[<p>FPGA用来加速运算的调研.😁</p>
]]></summary>
        <content type="html"><![CDATA[<p>FPGA用来加速运算的调研.😁</p>
<!-- more -->
<h2 id=""><a href="https://www.zhihu.com/question/280468724/answer/517329473"><strong>FPGA算法加速有什么一般的套路？ - Dorus TAN的回答 - 知乎</strong></a></h2>
<ol>
<li>并行计算，比如每个步骤没有关连性的循环操作；</li>
<li>算法步骤的固定程度，通常越固定的算法越适合用流水线实现，虽然结果延迟差不多，但是流水结构的吞吐量非常大；</li>
<li>乘法运算，FPGA的乘法运算通常用乘法器只需要一个周期；</li>
<li>一些特定的矩阵运算。</li>
</ol>
<h2 id="-2"><a href="https://www.zhihu.com/question/24174597/answer/138717507"><strong>如何评价微软在数据中心使用 FPGA 代替传统 CPU 的做法？ - 李博杰的回答 - 知乎</strong></a></h2>
<ul>
<li>
<p>FPGA 为什么快？「都是同行衬托得好」。<strong>CPU、GPU 都属于冯·诺依曼结构，指令译码执行、共享内存</strong>，FPGA 之所以比 CPU 甚至 GPU 能效高，本质上是无指令、无需共享内存的体系结构带来的福利。</p>
</li>
<li>
<p>FPGA 每个逻辑单元的功能在重编程（烧写）时就已经确定，<strong>不需要指令</strong>。</p>
</li>
<li>
<p><strong>计算密集型任务</strong>(包括矩阵运算、图像处理、机器学习、压缩、非对称加密、Bing 搜索的排序等)</p>
<ul>
<li>Stratix V FPGA 的整数乘法运算性能与 20 核的 CPU 基本相当</li>
<li>浮点乘法运算性能与 8 核的 CPU 基本相当，而比 GPU 低一个数量级。</li>
<li>在数据中心，FPGA 相比 GPU 的核心优势在于<strong>延迟</strong>。</li>
<li>FPGA 同时拥有<strong>流水线并行和数据并行</strong>，而 GPU 几乎只有数据并行（流水线深度受限）。</li>
<li>数据中心的计算任务是<strong>灵活多变</strong>的，而 ASIC 研发成本高、周期长。好不容易大规模部署了一批某种神经网络的加速卡，结果另一种神经网络更火了，钱就白费了。FPGA 只需要几百毫秒就可以更新逻辑功能。FPGA 的灵活性可以保护投资</li>
</ul>
</li>
<li>
<p><strong>通信密集型任务</strong></p>
<ul>
<li>从吞吐量上讲，FPGA 上的收发器可以直接接上 40 Gbps 甚至 100 Gbps 的网线，以线速处理任意大小的数据包。</li>
<li>网卡把数据包收到 CPU，CPU 再发给网卡，即使使用 DPDK 这样高性能的数据包处理框架，延迟也有 4~5 微秒。</li>
</ul>
</li>
<li>
<p>只要规模足够大，对 FPGA 价格过高的担心将是不必要的。</p>
</li>
<li>
<p>对很多类型的应用，随着分布式 FPGA 加速器的规模扩大，其性能提升是超线性的。</p>
</li>
<li>
<p>把任务拆分到分布式 FPGA 集群的关键在于平衡计算和通信。</p>
</li>
<li>
<p>每做一点不同的事情，就要占用一定的 FPGA 逻辑资源。<strong>如果要做的事情复杂、重复性不强，就会占用大量的逻辑资源，其中的大部分处于闲置状态</strong>。这时就不如用冯·诺依曼结构的处理器。</p>
</li>
<li>
<p>FPGA 和 CPU 协同工作，<strong>局部性和重复性强的归 FPGA，复杂的归 CPU</strong>。</p>
</li>
</ul>
<h2 id="-3"><a href="https://china.xilinx.com/support/documentation/white_papers/c_wp491-floating-to-fixed-point.pdf"><strong>将浮点转为定点大幅降低功耗和成本 - Xilinx</strong></a></h2>
<ul>
<li>用定点实现的设计总是比用浮点实现的同一设计更加高效，因为定点实现方案所占用的资源和消耗的功耗更少。若将设计迁移到定点，功耗和占用面积缩减一半并不稀奇。</li>
<li>对于采用 C/C++ 语言设计的客户，赛灵思提供 Vivado HLS 并支持任意精度定点数据类型，使客户能够方便地采用定点进行设计或者将现有的 C/C++ 设计转换成定点。</li>
<li><strong>浮点转换为定点的优势</strong>:
<ul>
<li>减少 FPGA 资源占用（所需的 DSP48E2、查找表 (LUT) 和触发器更少，存储定点数字所需的存储容量更小）</li>
<li>功耗更低</li>
<li>材料成本降低</li>
<li>降低时延</li>
<li>相近的性能和精度</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Zynq Book 学习： 引言]]></title>
        <id>https://Busy-Bob.github.io/post/the-zynq-book-xue-xi/</id>
        <link href="https://Busy-Bob.github.io/post/the-zynq-book-xue-xi/">
        </link>
        <updated>2020-12-31T07:25:06.000Z</updated>
        <summary type="html"><![CDATA[<p>学习The Zynq Book第一章时的一些笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>学习The Zynq Book第一章时的一些笔记</p>
<!-- more -->
<ul>
<li>
<p>Zynq 的本质特征，是它组合了一个双核ARM Cortex-A9 <strong>处理器</strong>和一个传统的现场可编程门阵列（Field Programmable Gate Array，<strong>FPGA</strong>）逻辑部件。</p>
</li>
<li>
<p>这个架构实现了工业标准的AXI 接口，在芯片的两个部分之间实现了<strong>高带宽、低延迟</strong>的连接。</p>
</li>
<li>
<p>这意味着处理器和逻辑部分各自都可以发挥最佳的用途，而<strong>不会有</strong>在两个分立的芯片之间的那种<strong>接口开销</strong>。同时又能获得系统被简化为单一芯片所带来的好处，包括<strong>物理尺寸</strong>和整体<strong>成本的降低</strong>。</p>
</li>
<li>
<p><strong>什么是片上系统/SoC (System on Chip)</strong>:</p>
<ul>
<li>单个硅芯片就可以用来实现整个系统的功能，而不是需要用几个不同的物理芯片来实现。</li>
<li>常用于指专用集成电路（Application Specific Integrated Circuit，ASIC）</li>
<li>和板上系统(在pcb板中组合多个元件)对比。</li>
<li><strong>缺点</strong>：
<ul>
<li>开发时间和成本</li>
<li>难以重用，不够灵活（与FPGA不同，直接设计芯片设计）</li>
</ul>
</li>
<li><strong>例子</strong>：手机，PC，平板等的CPU</li>
</ul>
</li>
<li>
<p>Zynq：灵活的SoC 的平台，全可编程SoC （All-Programmable SoC，APSoC）</p>
<ul>
<li>处理系统（PS）：支持软件程序和/ 或操作系统</li>
<li>可编程逻辑（PL）：实现高速逻辑、算术和数据流子系统</li>
<li>工业标准的高级可扩展接口（Advanced eXtensible Interface，AXI）连接。<br>
<img src="https://Busy-Bob.github.io/post-images/1609400781987.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>软硬件系统关系<br>
<img src="https://Busy-Bob.github.io/post-images/1609401050095.png" alt="" loading="lazy"></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ZYNQ中的通信接口(包括PS与PL)]]></title>
        <id>https://Busy-Bob.github.io/post/zynq-zhong-de-si-chong-tong-xin-jie-kou__/</id>
        <link href="https://Busy-Bob.github.io/post/zynq-zhong-de-si-chong-tong-xin-jie-kou__/">
        </link>
        <updated>2020-12-31T02:45:05.000Z</updated>
        <content type="html"><![CDATA[<p>总体架构图为：<br>
<img src="https://Busy-Bob.github.io/post-images/1609385485651.png" alt="" loading="lazy"></p>
<ul>
<li><strong>PS (Processing System)中对外通信管脚:</strong>：
<ul>
<li><strong>MIO</strong> (Multiplexed Input/Output，MIO)： 利用复用的输入 / 输出，和外部接口之间通信，一共54 个引脚。MIO在zynq上的管脚是固定的，占用IO号为0-53。</li>
<li><strong>EMIO</strong> (Extended MIO，EMIO)： 是通过PL部分扩展的，所以使用EMIO时候需要在<strong>约束文件中分配管脚</strong>，占用IO号为54-117。EMIO 并不是 PS 和外部连接之间的直接通路，而是通过共用了 PL 的 I/O 资源来实现的。</li>
</ul>
</li>
</ul>
<blockquote>
<p><em>当需要扩展超过 54 个引脚的时候可以用 EMIO，而当 PL 中实现了一个 IP 包的时候，这也是 PS 和 PL 中的IP 包接口的一种方法(即<strong>PS可以利用EMIO和PL进行通信</strong>)</em></p>
</blockquote>
<ul>
<li>
<p>**PL (Programmable Logic) 和 PS的通信接口 **<br>
<img src="https://Busy-Bob.github.io/post-images/1609403066047.png" alt="" loading="lazy"></p>
<ul>
<li><strong>通用AXI（General Purpose AXI）</strong>： 一共有四个，对应图中主机互联和从机互联。32 位数据总线，适合PL 和PS 之间的<strong>中低速通信</strong>。接口是透传的不带缓冲。</li>
<li><strong>加速器一致性端口（Accelerator Coherency Port）</strong>： 在PL 和APU 内的SCU之间的单个异步连接，总线宽度为64 位。这个端口用来实现APU cache 和PL的单元之间的一致性（直接和PS中的APU相连）</li>
<li><strong>高性能端口（High Performance Ports）</strong>： 带有FIFO缓冲来提供“ 批量” 读写操作，并支持PL 和PS 中的存储器单元的高速率通信。数据宽度是32 或64 位，在所有四个接口中PL 都是做主机的。<strong>(PL直接从DDR中获取数据)</strong></li>
<li><strong>EMIO</strong>： 原本是用来连接I2C等协议的外设，也可以给PS使用。</li>
</ul>
</li>
</ul>
<h1 id="pynq中python类对应">PYNQ中python类对应：</h1>
<ul>
<li><strong>GPIO</strong>： 对应MIO， EMIO。（类似于单片机中的GPIO）</li>
<li><strong>MMIO</strong>： 对应GP AXI，即通用AXI端口。（调用IP核，PS给PL数据时候用）</li>
<li><strong>Xlnk</strong>： 对应HP AXI，访问DDR内存，即高性能AXI端口。（访问PS 的 DRAM， 用以PL需要内存时候，PS分配内存给PL）</li>
<li><strong>DMA</strong>： 对应HP AXI，访问DMA，即高性能AXI端口</li>
</ul>
<h1 id="axi-协议">AXI 协议</h1>
<ul>
<li>AXI4：  通过一簇高达256 个数据字（或“ 数据拍（data beats）”）的数据传输来给定一个地址。</li>
<li>AXI4_LITE： 只支持每次连接传输一个数据（非批量）。</li>
<li>AXI4-Stream： 用于高速流数据，支持批量传输无限大小的数据。没有地址机制，这种总线类型最适合源和目的地之间的直接数据流。</li>
</ul>
]]></content>
    </entry>
</feed>